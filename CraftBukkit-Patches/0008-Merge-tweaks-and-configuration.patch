From 71d6f34342b3b3c57947cb548e50a3437007b316 Mon Sep 17 00:00:00 2001
From: md_5 <md_5@live.com.au>
Date: Sat, 23 Mar 2013 09:46:33 +1100
Subject: [PATCH] Merge tweaks and configuration

This allows the merging of Experience orbs, as well as the configuration of the merge radius of items. Additionally it refactors the merge algorithm to be a better experience for players.

diff --git a/src/main/java/net/minecraft/server/EntityItem.java b/src/main/java/net/minecraft/server/EntityItem.java
index 6243b0e..73b9e38 100644
--- a/src/main/java/net/minecraft/server/EntityItem.java
+++ b/src/main/java/net/minecraft/server/EntityItem.java
@@ -122,7 +122,10 @@ public class EntityItem extends Entity {
     }
 
     private void w() {
-        Iterator iterator = this.world.a(EntityItem.class, this.getBoundingBox().grow(0.5D, 0.0D, 0.5D)).iterator();
+        // Spigot start
+        double radius = world.spigotConfig.itemMerge;
+        Iterator iterator = this.world.a(EntityItem.class, this.getBoundingBox().grow(radius, radius, radius)).iterator();
+        // Spigot end
 
         while (iterator.hasNext()) {
             EntityItem entityitem = (EntityItem) iterator.next();
@@ -156,11 +159,17 @@ public class EntityItem extends Entity {
                     } else if (itemstack1.count + itemstack.count > itemstack1.getMaxStackSize()) {
                         return false;
                     } else {
-                        itemstack1.count += itemstack.count;
-                        entityitem.pickupDelay = Math.max(entityitem.pickupDelay, this.pickupDelay);
-                        entityitem.age = Math.min(entityitem.age, this.age);
-                        entityitem.setItemStack(itemstack1);
-                        this.die();
+                        // Spigot start
+                        // do not merge when separated by a solid block
+                        if (world.areSeparatedBySolidBlock(this, entityitem))
+                            return false;
+
+                        itemstack.count += itemstack1.count;
+                        this.pickupDelay = Math.max(entityitem.pickupDelay, this.pickupDelay);
+                        this.age = Math.min(entityitem.age, this.age);
+                        this.setItemStack(itemstack);
+                        entityitem.die();
+                        // Spigot end
                         return true;
                     }
                 } else {
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 11e072b..62270dc 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -888,6 +888,27 @@ public abstract class World implements IBlockAccess {
         }
     }
 
+    // Spigot start
+    // Performs a ray trace between entity1 and entity2, returning true if a
+    // solid block is found between them or false if none
+    public boolean areSeparatedBySolidBlock(Entity entity1, Entity entity2) {
+        // nextUp is used because the y coord of entities is at
+        // the bottom of their bounding box and the rayTrace logic
+        // sees this as an intersection with whatever the entity
+        // is standing on
+        Vec3D thisPos = new Vec3D(entity1.locX, Math.nextUp(entity1.locY), entity1.locZ);
+        Vec3D otherPos = new Vec3D(entity2.locX, Math.nextUp(entity2.locY), entity2.locZ);
+        // a second, slightly offset ray trace is used to stop merging
+        // through corners
+        Vec3D thisPosOffset = new Vec3D(Math.nextUp(entity1.locX), Math.nextUp(entity1.locY), Math.nextUp(entity1.locZ));
+        Vec3D otherPosOffset = new Vec3D(Math.nextUp(entity2.locX), Math.nextUp(entity2.locY), Math.nextUp(entity2.locZ));
+
+        // do the actual traces
+        return rayTrace(thisPos, otherPos, false, true, false) != null
+                || rayTrace(thisPosOffset, otherPosOffset, false, true, false) != null;
+    }
+    // Spigot end
+
     public void makeSound(Entity entity, String s, float f, float f1) {
         for (int i = 0; i < this.u.size(); ++i) {
             ((IWorldAccess) this.u.get(i)).a(s, entity.locX, entity.locY, entity.locZ, f, f1);
@@ -970,6 +991,23 @@ public abstract class World implements IBlockAccess {
             // Not all projectiles extend EntityProjectile, so check for Bukkit interface instead
             event = CraftEventFactory.callProjectileLaunchEvent(entity);
         }
+        // Spigot start
+        else if (entity instanceof EntityExperienceOrb) {
+            EntityExperienceOrb xp = (EntityExperienceOrb) entity;
+            double radius = spigotConfig.expMerge;
+            if (radius > 0) {
+                List<Entity> entities = this.getEntities(entity, entity.getBoundingBox().grow(radius, radius, radius));
+                for (Entity e : entities) {
+                    if (e instanceof EntityExperienceOrb) {
+                        EntityExperienceOrb loopItem = (EntityExperienceOrb) e;
+                        if (!loopItem.dead && !areSeparatedBySolidBlock(entity, loopItem)) {
+                            xp.value += loopItem.value;
+                            loopItem.die();
+                        }
+                    }
+                }
+            }
+        } // Spigot end
 
         if (event != null && (event.isCancelled() || entity.dead)) {
             entity.dead = true;
diff --git a/src/main/java/org/spigotmc/SpigotWorldConfig.java b/src/main/java/org/spigotmc/SpigotWorldConfig.java
index 5749a45..7322703 100644
--- a/src/main/java/org/spigotmc/SpigotWorldConfig.java
+++ b/src/main/java/org/spigotmc/SpigotWorldConfig.java
@@ -112,4 +112,18 @@ public class SpigotWorldConfig
         wheatModifier = getAndValidateGrowth( "Wheat" );
         wartModifier = getAndValidateGrowth( "NetherWart" );
     }
+
+    public double itemMerge;
+    private void itemMerge()
+    {
+        itemMerge = getDouble("merge-radius.item", 2.5 );
+        log( "Item Merge Radius: " + itemMerge );
+    }
+
+    public double expMerge;
+    private void expMerge()
+    {
+        expMerge = getDouble("merge-radius.exp", 3.0 );
+        log( "Experience Merge Radius: " + expMerge );
+    }
 }
-- 
2.1.4

