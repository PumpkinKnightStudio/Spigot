From 202b1f6b5107320a0b94b2b00b2def74a035e420 Mon Sep 17 00:00:00 2001
From: md_5 <git@md-5.net>
Date: Sat, 13 Dec 2014 03:06:05 +0100
Subject: [PATCH] BungeeCord Chat API


diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSystemChatPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSystemChatPacket.java
index 08d58de50..d949695ac 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSystemChatPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSystemChatPacket.java
@@ -7,6 +7,17 @@ import net.minecraft.network.protocol.Packet;
 
 public record ClientboundSystemChatPacket(IChatBaseComponent content, boolean overlay) implements Packet<PacketListenerPlayOut> {
 
+    // Spigot start
+    @Deprecated
+    public ClientboundSystemChatPacket(net.md_5.bungee.api.chat.BaseComponent[] content, boolean overlay) {
+        this(IChatBaseComponent.ChatSerializer.fromJson(net.md_5.bungee.chat.ComponentSerializer.toString(content)), overlay);
+    }
+
+    public ClientboundSystemChatPacket(net.md_5.bungee.api.chat.BaseComponent content, boolean overlay) {
+        this(IChatBaseComponent.ChatSerializer.fromJson(net.md_5.bungee.chat.ComponentSerializer.toString(content)), overlay);
+    }
+    // Spigot end
+
     public ClientboundSystemChatPacket(PacketDataSerializer packetdataserializer) {
         this(packetdataserializer.readComponentTrusted(), packetdataserializer.readBoolean());
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index b1bf02908..b58ca7759 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -269,6 +269,11 @@ import org.yaml.snakeyaml.Yaml;
 import org.yaml.snakeyaml.constructor.SafeConstructor;
 import org.yaml.snakeyaml.error.MarkedYAMLException;
 
+// Spigot start
+import net.md_5.bungee.api.chat.BaseComponent;
+import net.md_5.bungee.api.chat.TextComponent;
+// Spigot end
+
 public final class CraftServer implements Server {
     private final String serverName = "CraftBukkit";
     private final String serverVersion;
@@ -2508,6 +2513,58 @@ public final class CraftServer implements Server {
         public void restart() {
             org.spigotmc.RestartCommand.restart();
         }
+
+        @Override
+        public void broadcast(BaseComponent component) {
+            for (Player player : getOnlinePlayers()) {
+                player.spigot().sendMessage(component);
+            }
+        }
+
+        @Override
+        public void broadcast(BaseComponent... components) {
+            for (Player player : getOnlinePlayers()) {
+                player.spigot().sendMessage(components);
+            }
+        }
+
+        @Override
+        public Inventory createInventory(InventoryHolder owner, InventoryType type, BaseComponent title) {
+            Preconditions.checkArgument(type.isCreatable(), "Cannot open an inventory of type ", type);
+            return CraftInventoryCreator.INSTANCE.createInventory(owner, type, title);
+        }
+
+        @Override
+        public Inventory createInventory(InventoryHolder owner, int size, BaseComponent title) {
+            Preconditions.checkArgument(9 <= size && size <= 54 && size % 9 == 0, "Size for custom inventory must be a multiple of 9 between 9 and 54 slots (got " + size + ")");
+            return CraftInventoryCreator.INSTANCE.createInventory(owner, size, title);
+        }
+
+        @Override
+        public Merchant createMerchant(BaseComponent title) {
+            return new CraftMerchantCustom((title == null) ? new TextComponent(InventoryType.MERCHANT.getDefaultTitle()) : title);
+        }
+
+        @Override
+        public BossBar createBossBar(BaseComponent title, BarColor color, BarStyle style, BarFlag... flags) {
+            return new CraftBossBar(title, color, style, flags);
+        }
+
+        @Override
+        public KeyedBossBar createBossBar(NamespacedKey key, BaseComponent title, BarColor color, BarStyle style, BarFlag... flags) {
+            Preconditions.checkArgument(key != null, "key");
+
+            net.minecraft.network.chat.IChatBaseComponent nmsTitle = CraftChatMessage.fromJSON(net.md_5.bungee.chat.ComponentSerializer.toString(title));
+            BossBattleCustom bossBattleCustom = getServer().getCustomBossEvents().create(CraftNamespacedKey.toMinecraft(key), nmsTitle);
+            CraftKeyedBossbar craftKeyedBossbar = new CraftKeyedBossbar(bossBattleCustom);
+            craftKeyedBossbar.setColor(color);
+            craftKeyedBossbar.setStyle(style);
+            for (BarFlag flag : flags) {
+                craftKeyedBossbar.addFlag(flag);
+            }
+
+            return craftKeyedBossbar;
+        }
     };
 
     public org.bukkit.Server.Spigot spigot()
diff --git a/src/main/java/org/bukkit/craftbukkit/advancement/CraftAdvancementDisplay.java b/src/main/java/org/bukkit/craftbukkit/advancement/CraftAdvancementDisplay.java
index edf19a70a..520e7f1e5 100644
--- a/src/main/java/org/bukkit/craftbukkit/advancement/CraftAdvancementDisplay.java
+++ b/src/main/java/org/bukkit/craftbukkit/advancement/CraftAdvancementDisplay.java
@@ -6,6 +6,11 @@ import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.util.CraftChatMessage;
 import org.bukkit.inventory.ItemStack;
 
+// Spigot start
+import net.md_5.bungee.api.chat.BaseComponent;
+import net.md_5.bungee.chat.ComponentSerializer;
+// Spigot end
+
 public class CraftAdvancementDisplay implements org.bukkit.advancement.AdvancementDisplay {
 
     private final AdvancementDisplay handle;
@@ -62,4 +67,25 @@ public class CraftAdvancementDisplay implements org.bukkit.advancement.Advanceme
     public AdvancementDisplayType getType() {
         return AdvancementDisplayType.values()[handle.getType().ordinal()];
     }
+
+    // Spigot start
+    private final Spigot spigot = new Spigot();
+
+    private final class Spigot implements org.bukkit.advancement.AdvancementDisplay.Spigot {
+
+        @Override
+        public BaseComponent getTitle() {
+            return ComponentSerializer.deserialize(CraftChatMessage.toJSON(handle.getTitle()));
+        }
+
+        @Override
+        public BaseComponent getDescription() {
+            return ComponentSerializer.deserialize(CraftChatMessage.toJSON(handle.getDescription()));
+        }
+    }
+
+    public Spigot spigot() {
+        return spigot;
+    }
+    // Spigot end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBeacon.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBeacon.java
index df2177a6f..7da3cebf6 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBeacon.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBeacon.java
@@ -14,6 +14,11 @@ import org.bukkit.entity.LivingEntity;
 import org.bukkit.potion.PotionEffect;
 import org.bukkit.potion.PotionEffectType;
 
+// Spigot start
+import net.md_5.bungee.api.chat.BaseComponent;
+import net.md_5.bungee.chat.ComponentSerializer;
+// Spigot end
+
 public class CraftBeacon extends CraftBlockEntityState<TileEntityBeacon> implements Beacon {
 
     public CraftBeacon(World world, TileEntityBeacon tileEntity) {
@@ -101,4 +106,26 @@ public class CraftBeacon extends CraftBlockEntityState<TileEntityBeacon> impleme
     public CraftBeacon copy() {
         return new CraftBeacon(this);
     }
+
+    // Spigot start
+    private final Spigot spigot = new Spigot();
+
+    private final class Spigot implements org.bukkit.Nameable.Spigot {
+
+        @Override
+        public BaseComponent getCustomName() {
+            net.minecraft.network.chat.IChatBaseComponent name = getSnapshot().name;
+            return (name != null) ? ComponentSerializer.deserialize(CraftChatMessage.toJSON(name)) : null;
+        }
+
+        @Override
+        public void setCustomName(BaseComponent name) {
+            getSnapshot().setCustomName((name != null) ? CraftChatMessage.fromJSON(ComponentSerializer.toString(name)) : null);
+        }
+    }
+
+    public Spigot spigot() {
+        return spigot;
+    }
+    // Spigot end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftCommandBlock.java b/src/main/java/org/bukkit/craftbukkit/block/CraftCommandBlock.java
index 615af6a48..2d80ffea7 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftCommandBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftCommandBlock.java
@@ -5,6 +5,11 @@ import org.bukkit.World;
 import org.bukkit.block.CommandBlock;
 import org.bukkit.craftbukkit.util.CraftChatMessage;
 
+// Spigot start
+import net.md_5.bungee.api.chat.BaseComponent;
+import net.md_5.bungee.chat.ComponentSerializer;
+// Spigot end
+
 public class CraftCommandBlock extends CraftBlockEntityState<TileEntityCommand> implements CommandBlock {
 
     public CraftCommandBlock(World world, TileEntityCommand tileEntity) {
@@ -39,4 +44,25 @@ public class CraftCommandBlock extends CraftBlockEntityState<TileEntityCommand>
     public CraftCommandBlock copy() {
         return new CraftCommandBlock(this);
     }
+
+    // Spigot start
+    private final Spigot spigot = new Spigot();
+
+    private final class Spigot implements CommandBlock.Spigot {
+
+        @Override
+        public BaseComponent getName() {
+            return ComponentSerializer.deserialize(CraftChatMessage.toJSON(getSnapshot().getCommandBlock().getName()));
+        }
+
+        @Override
+        public void setName(BaseComponent name) {
+            getSnapshot().getCommandBlock().setName((name != null) ? CraftChatMessage.fromJSON(ComponentSerializer.toString(name)) : null);
+        }
+    }
+
+    public Spigot spigot() {
+        return spigot;
+    }
+    // Spigot end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftContainer.java b/src/main/java/org/bukkit/craftbukkit/block/CraftContainer.java
index 16e7b64f7..45111a347 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftContainer.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftContainer.java
@@ -6,6 +6,11 @@ import org.bukkit.World;
 import org.bukkit.block.Container;
 import org.bukkit.craftbukkit.util.CraftChatMessage;
 
+// Spigot start
+import net.md_5.bungee.api.chat.BaseComponent;
+import net.md_5.bungee.chat.ComponentSerializer;
+// Spigot end
+
 public abstract class CraftContainer<T extends TileEntityContainer> extends CraftBlockEntityState<T> implements Container {
 
     public CraftContainer(World world, T tileEntity) {
@@ -53,4 +58,26 @@ public abstract class CraftContainer<T extends TileEntityContainer> extends Craf
 
     @Override
     public abstract CraftContainer<T> copy();
+
+    // Spigot start
+    private final Spigot spigot = new Spigot();
+
+    private final class Spigot implements org.bukkit.Nameable.Spigot {
+
+        @Override
+        public BaseComponent getCustomName() {
+            net.minecraft.network.chat.IChatBaseComponent name = getSnapshot().name;
+            return (name != null) ? ComponentSerializer.deserialize(CraftChatMessage.toJSON(name)) : null;
+        }
+
+        @Override
+        public void setCustomName(BaseComponent name) {
+            getSnapshot().setCustomName((name != null) ? CraftChatMessage.fromJSON(ComponentSerializer.toString(name)) : null);
+        }
+    }
+
+    public Spigot spigot() {
+        return spigot;
+    }
+    // Spigot end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftEnchantingTable.java b/src/main/java/org/bukkit/craftbukkit/block/CraftEnchantingTable.java
index d8ab94b8c..f774533fe 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftEnchantingTable.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftEnchantingTable.java
@@ -5,6 +5,11 @@ import org.bukkit.World;
 import org.bukkit.block.EnchantingTable;
 import org.bukkit.craftbukkit.util.CraftChatMessage;
 
+// Spigot start
+import net.md_5.bungee.api.chat.BaseComponent;
+import net.md_5.bungee.chat.ComponentSerializer;
+// Spigot end
+
 public class CraftEnchantingTable extends CraftBlockEntityState<TileEntityEnchantTable> implements EnchantingTable {
 
     public CraftEnchantingTable(World world, TileEntityEnchantTable tileEntity) {
@@ -39,4 +44,26 @@ public class CraftEnchantingTable extends CraftBlockEntityState<TileEntityEnchan
     public CraftEnchantingTable copy() {
         return new CraftEnchantingTable(this);
     }
+
+    // Spigot start
+    private final Spigot spigot = new Spigot();
+
+    private final class Spigot implements org.bukkit.Nameable.Spigot {
+
+        @Override
+        public BaseComponent getCustomName() {
+            TileEntityEnchantTable enchant = getSnapshot();
+            return enchant.hasCustomName() ? ComponentSerializer.deserialize(CraftChatMessage.toJSON(enchant.getCustomName())) : null;
+        }
+
+        @Override
+        public void setCustomName(BaseComponent name) {
+            getSnapshot().setCustomName((name != null) ? CraftChatMessage.fromJSON(ComponentSerializer.toString(name)) : null);
+        }
+    }
+
+    public Spigot spigot() {
+        return spigot;
+    }
+    // Spigot end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftSign.java b/src/main/java/org/bukkit/craftbukkit/block/CraftSign.java
index 4f45365df..db1d55160 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftSign.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftSign.java
@@ -16,6 +16,11 @@ import org.bukkit.entity.Player;
 import org.bukkit.event.player.PlayerSignOpenEvent;
 import org.jetbrains.annotations.NotNull;
 
+// Spigot start
+import net.md_5.bungee.api.chat.BaseComponent;
+import net.md_5.bungee.chat.ComponentSerializer;
+// Spigot end
+
 public class CraftSign<T extends TileEntitySign> extends CraftBlockEntityState<T> implements Sign {
 
     private final CraftSignSide front;
@@ -107,6 +112,10 @@ public class CraftSign<T extends TileEntitySign> extends CraftBlockEntityState<T
     public void applyTo(T sign) {
         getSnapshot().setText(front.applyLegacyStringToSignSide(), true);
         getSnapshot().setText(back.applyLegacyStringToSignSide(), false);
+        // Spigot start - Components should take priority, therefore they are set afterwards
+        getSnapshot().setText(front.applyComponentsToSignSide(), true);
+        getSnapshot().setText(back.applyComponentsToSignSide(), false);
+        // Spigot end
 
         super.applyTo(sign);
     }
@@ -157,4 +166,20 @@ public class CraftSign<T extends TileEntitySign> extends CraftBlockEntityState<T
     private static String revertComponent(IChatBaseComponent component) {
         return CraftChatMessage.fromComponent(component);
     }
+
+    // Spigot start
+    public static IChatBaseComponent[] sanitizeLines(BaseComponent[] lines) {
+        IChatBaseComponent[] components = new IChatBaseComponent[4];
+
+        for (int i = 0; i < 4; i++) {
+            if (i < lines.length && lines[i] != null) {
+                components[i] = CraftChatMessage.fromJSON(ComponentSerializer.toString(lines));
+            } else {
+                components[i] = IChatBaseComponent.empty();
+            }
+        }
+
+        return components;
+    }
+    // Spigot end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/sign/CraftSignSide.java b/src/main/java/org/bukkit/craftbukkit/block/sign/CraftSignSide.java
index 4a6d7a14d..642c2c2b1 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/sign/CraftSignSide.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/sign/CraftSignSide.java
@@ -10,6 +10,11 @@ import org.bukkit.craftbukkit.util.CraftChatMessage;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+// Spigot start
+import net.md_5.bungee.api.chat.BaseComponent;
+import net.md_5.bungee.chat.ComponentSerializer;
+// Spigot end
+
 public class CraftSignSide implements SignSide {
 
     // Lazily initialized only if requested:
@@ -80,4 +85,65 @@ public class CraftSignSide implements SignSide {
 
         return signText;
     }
+
+    // Spigot start
+    public SignText applyComponentsToSignSide() {
+        if (spigot.lines != null) {
+            for (int i = 0; i < spigot.lines.length; i++) {
+                BaseComponent line = spigot.lines[i];
+                IChatBaseComponent nmsLine = (line != null) ? CraftChatMessage.fromJSON(ComponentSerializer.toString(line)) : IChatBaseComponent.empty();
+                signText = signText.setMessage(i, nmsLine);
+            }
+        }
+
+        return signText;
+    }
+
+    private final Spigot spigot = new Spigot();
+
+    public final class Spigot implements SignSide.Spigot {
+
+        // Lazily initialized only if requested:
+        private BaseComponent[] originalLines = null;
+        private BaseComponent[] lines = null;
+
+        @Override
+        public BaseComponent[] getLines() {
+            if (lines == null) {
+                IChatBaseComponent[] messages = signText.getMessages(false);
+                lines = new BaseComponent[messages.length];
+                System.arraycopy(revertComponents(messages), 0, lines, 0, lines.length);
+                originalLines = new BaseComponent[lines.length];
+                System.arraycopy(lines, 0, originalLines, 0, originalLines.length);
+            }
+            return lines;
+        }
+
+        @Override
+        public BaseComponent getLine(int index) throws IndexOutOfBoundsException {
+            return getLines()[index];
+        }
+
+        @Override
+        public void setLine(int index, BaseComponent line) throws IndexOutOfBoundsException {
+            getLines()[index] = line;
+        }
+
+        public static BaseComponent[] revertComponents(IChatBaseComponent[] components) {
+            BaseComponent[] lines = new BaseComponent[components.length];
+            for (int i = 0; i < components.length; i++) {
+                lines[i] = revertComponent(components[i]);
+            }
+            return lines;
+        }
+
+        private static BaseComponent revertComponent(IChatBaseComponent component) {
+            return ComponentSerializer.deserialize(CraftChatMessage.toJSON(component));
+        }
+    }
+
+    public Spigot spigot() {
+        return spigot;
+    }
+    // Spigot end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java b/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java
index 398708735..4744a0230 100644
--- a/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java
+++ b/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java
@@ -19,6 +19,12 @@ import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.craftbukkit.util.CraftChatMessage;
 import org.bukkit.entity.Player;
 
+// Spigot start
+import net.md_5.bungee.api.chat.BaseComponent;
+import net.md_5.bungee.chat.ComponentSerializer;
+import net.minecraft.network.chat.IChatBaseComponent;
+// Spigot end
+
 public class CraftBossBar implements BossBar {
 
     private final BossBattleServer handle;
@@ -41,6 +47,25 @@ public class CraftBossBar implements BossBar {
         this.setStyle(style);
     }
 
+    // Spigot start
+    public CraftBossBar(BaseComponent title, BarColor color, BarStyle style, BarFlag... flags) {
+        handle = new BossBattleServer(
+                (title != null) ? CraftChatMessage.fromJSON(ComponentSerializer.toString(title)) : IChatBaseComponent.empty(),
+                convertColor(color),
+                convertStyle(style)
+        );
+
+        this.initialize();
+
+        for (BarFlag flag : flags) {
+            this.addFlag(flag);
+        }
+
+        this.setColor(color);
+        this.setStyle(style);
+    }
+    // Spigot end
+
     public CraftBossBar(BossBattleServer bossBattleServer) {
         this.handle = bossBattleServer;
         this.initialize();
@@ -215,6 +240,26 @@ public class CraftBossBar implements BossBar {
         }
     }
 
+    // Spigot start
+    private final Spigot spigot = new Spigot();
+
+    private final class Spigot implements BossBar.Spigot {
+
+        public BaseComponent getTitle() {
+            return (handle.name != null) ? ComponentSerializer.deserialize(CraftChatMessage.toJSON(handle.name)) : new net.md_5.bungee.api.chat.TextComponent();
+        }
+
+        public void setTitle(BaseComponent title) {
+            handle.name = (title != null) ? CraftChatMessage.fromJSON(ComponentSerializer.toString(title)) : IChatBaseComponent.empty();
+            handle.broadcast(PacketPlayOutBoss::createUpdateNamePacket);
+        }
+    }
+
+    public Spigot spigot() {
+        return spigot;
+    }
+    // Spigot end
+
     private final class FlagContainer {
 
         private Supplier<Boolean> get;
diff --git a/src/main/java/org/bukkit/craftbukkit/command/ServerCommandSender.java b/src/main/java/org/bukkit/craftbukkit/command/ServerCommandSender.java
index 74558e852..13008357b 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/ServerCommandSender.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/ServerCommandSender.java
@@ -103,6 +103,29 @@ public abstract class ServerCommandSender implements CommandSender {
     // Spigot start
     private final org.bukkit.command.CommandSender.Spigot spigot = new org.bukkit.command.CommandSender.Spigot()
     {
+        @Override
+        public void sendMessage(net.md_5.bungee.api.chat.BaseComponent component)
+        {
+            ServerCommandSender.this.sendMessage(net.md_5.bungee.api.chat.TextComponent.toLegacyText(component));
+        }
+
+        @Override
+        public void sendMessage(net.md_5.bungee.api.chat.BaseComponent... components)
+        {
+            ServerCommandSender.this.sendMessage(net.md_5.bungee.api.chat.TextComponent.toLegacyText(components));
+        }
+
+        @Override
+        public void sendMessage(UUID sender, net.md_5.bungee.api.chat.BaseComponent... components)
+        {
+            this.sendMessage(components);
+        }
+
+        @Override
+        public void sendMessage(UUID sender, net.md_5.bungee.api.chat.BaseComponent component)
+        {
+            this.sendMessage(component);
+        }
     };
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java b/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java
index 45ef8936b..de5d19d7b 100644
--- a/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java
+++ b/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java
@@ -16,6 +16,12 @@ import org.bukkit.enchantments.EnchantmentTarget;
 import org.bukkit.enchantments.EnchantmentWrapper;
 import org.bukkit.inventory.ItemStack;
 
+// Spigot start
+import net.md_5.bungee.api.chat.BaseComponent;
+import net.md_5.bungee.api.chat.TranslatableComponent;
+import net.md_5.bungee.chat.ComponentSerializer;
+// Spigot end
+
 public class CraftEnchantment extends Enchantment {
 
     public static Enchantment minecraftToBukkit(net.minecraft.world.item.enchantment.Enchantment minecraft) {
@@ -158,6 +164,25 @@ public class CraftEnchantment extends Enchantment {
         return !handle.isCompatibleWith(ench.getHandle());
     }
 
+    // Spigot start
+    private final Spigot spigot = new Spigot();
+
+    private final class Spigot implements Enchantment.Spigot {
+
+        public TranslatableComponent getDisplayName() {
+            return new TranslatableComponent(getHandle().getDescriptionId());
+        }
+
+        public BaseComponent getDisplayName(int level) {
+            return ComponentSerializer.deserialize(org.bukkit.craftbukkit.util.CraftChatMessage.toJSON(getHandle().getFullname(level)));
+        }
+    }
+
+    public Spigot spigot() {
+        return spigot;
+    }
+    // Spigot end
+
     @Override
     public boolean equals(Object other) {
         if (this == other) {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index 61938adba..7eb72a2e2 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -202,6 +202,11 @@ import org.bukkit.util.BoundingBox;
 import org.bukkit.util.NumberConversions;
 import org.bukkit.util.Vector;
 
+// Spigot start
+import net.md_5.bungee.api.chat.BaseComponent;
+import net.md_5.bungee.chat.ComponentSerializer;
+// Spigot end
+
 public abstract class CraftEntity implements org.bukkit.entity.Entity {
     private static PermissibleBase perm;
     private static final CraftPersistentDataTypeRegistry DATA_TYPE_REGISTRY = new CraftPersistentDataTypeRegistry();
@@ -1219,6 +1224,37 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     // Spigot start
     private final org.bukkit.entity.Entity.Spigot spigot = new org.bukkit.entity.Entity.Spigot()
     {
+
+        @Override
+        public void sendMessage(net.md_5.bungee.api.chat.BaseComponent component)
+        {
+        }
+
+        @Override
+        public void sendMessage(net.md_5.bungee.api.chat.BaseComponent... components)
+        {
+        }
+
+        @Override
+        public void sendMessage(UUID sender, BaseComponent... components)
+        {
+        }
+
+        @Override
+        public void sendMessage(UUID sender, BaseComponent component)
+        {
+        }
+
+        @Override
+        public BaseComponent getCustomName() {
+            IChatBaseComponent name = getHandle().getCustomName();
+            return (name != null) ? ComponentSerializer.deserialize(CraftChatMessage.toJSON(name)) : null;
+        }
+
+        @Override
+        public void setCustomName(BaseComponent name) {
+            getHandle().setCustomName((name != null) ? CraftChatMessage.fromJSON(ComponentSerializer.toString(name)) : null);
+        }
     };
 
     public org.bukkit.entity.Entity.Spigot spigot()
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index b6af74ef5..b1a582a91 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -181,6 +181,13 @@ import org.bukkit.profile.PlayerProfile;
 import org.bukkit.scoreboard.Scoreboard;
 import org.jetbrains.annotations.NotNull;
 
+// Spigot start
+import net.md_5.bungee.api.ChatMessageType;
+import net.md_5.bungee.api.chat.BaseComponent;
+import net.md_5.bungee.api.chat.TextComponent;
+import net.md_5.bungee.chat.ComponentSerializer;
+// Spigot end
+
 @DelegateDeserialization(CraftOfflinePlayer.class)
 public class CraftPlayer extends CraftHumanEntity implements Player {
     private long firstPlayed = 0;
@@ -2214,6 +2221,187 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
             return java.util.Collections.unmodifiableSet( ret );
         }
+
+        @Override
+        public BaseComponent getPlayerListName() {
+            return (getHandle().listName == null) ? new TextComponent(getName()) : ComponentSerializer.deserialize(CraftChatMessage.toJSON(getHandle().listName));
+        }
+
+        @Override
+        public void setPlayerListName(BaseComponent name) {
+            getHandle().listName = CraftChatMessage.fromJSONOrNull(ComponentSerializer.toString(name));
+            for (EntityPlayer player : (List<EntityPlayer>) server.getHandle().players) {
+                if (player.getBukkitEntity().canSee(CraftPlayer.this)) {
+                    player.connection.send(new ClientboundPlayerInfoUpdatePacket(ClientboundPlayerInfoUpdatePacket.a.UPDATE_DISPLAY_NAME, getHandle()));
+                }
+            }
+        }
+
+        @Override
+        public BaseComponent getPlayerListHeader() {
+            return (playerListHeader == null) ? null : ComponentSerializer.deserialize(CraftChatMessage.toJSON(playerListHeader));
+        }
+
+        @Override
+        public BaseComponent getPlayerListFooter() {
+            return (playerListFooter == null) ? null : ComponentSerializer.deserialize(CraftChatMessage.toJSON(playerListFooter));
+        }
+
+        @Override
+        public void setPlayerListHeader(BaseComponent header) {
+            CraftPlayer.this.playerListHeader = (header != null) ? CraftChatMessage.fromJSON(ComponentSerializer.toString(header)) : null;
+            updatePlayerListHeaderFooter();
+        }
+
+        @Override
+        public void setPlayerListFooter(BaseComponent footer) {
+            CraftPlayer.this.playerListFooter = (footer != null) ? CraftChatMessage.fromJSON(ComponentSerializer.toString(footer)) : null;
+            updatePlayerListHeaderFooter();
+        }
+
+        @Override
+        public void setPlayerListHeaderFooter(BaseComponent header, BaseComponent footer) {
+            CraftPlayer.this.playerListHeader = (header != null) ? CraftChatMessage.fromJSON(ComponentSerializer.toString(header)) : null;
+            CraftPlayer.this.playerListFooter = (footer != null) ? CraftChatMessage.fromJSON(ComponentSerializer.toString(footer)) : null;
+            updatePlayerListHeaderFooter();
+        }
+
+        @Override
+        public void kickPlayer(BaseComponent message) {
+            org.spigotmc.AsyncCatcher.catchOp("player kick");
+            if (getHandle().connection == null) return;
+
+            getHandle().connection.disconnect((message == null) ? IChatBaseComponent.empty() : CraftChatMessage.fromJSON(ComponentSerializer.toString(message)));
+        }
+
+        @Override
+        public void sendSignChange(Location loc, BaseComponent[] lines) {
+            sendSignChange(loc, lines, DyeColor.BLACK);
+        }
+
+        @Override
+        public void sendSignChange(Location loc, BaseComponent[] lines, DyeColor dyeColor) {
+            sendSignChange(loc, lines, dyeColor, false);
+        }
+
+        @Override
+        public void sendSignChange(Location loc, BaseComponent[] lines, DyeColor dyeColor, boolean hasGlowingText) {
+            Preconditions.checkArgument(loc != null, "Location cannot be null");
+            Preconditions.checkArgument(dyeColor != null, "DyeColor cannot be null");
+
+            if (lines == null) {
+                lines = new BaseComponent[4];
+            }
+            Preconditions.checkArgument(lines.length >= 4, "Must have at least 4 lines (%s)", lines.length);
+
+            if (getHandle().connection == null) return;
+
+            IChatBaseComponent[] components = CraftSign.sanitizeLines(lines);
+            TileEntitySign sign = new TileEntitySign(CraftLocation.toBlockPosition(loc), Blocks.OAK_SIGN.defaultBlockState());
+            SignText text = sign.getFrontText();
+            text = text.setColor(EnumColor.byId(dyeColor.getWoolData()));
+            text = text.setHasGlowingText(hasGlowingText);
+            for (int i = 0; i < components.length; i++) {
+                text = text.setMessage(i, components[i]);
+            }
+            sign.setText(text, true);
+
+            getHandle().connection.send(sign.getUpdatePacket());
+        }
+
+        @Override
+        public void setResourcePack(String url, byte[] hash, BaseComponent prompt) {
+            setResourcePack(url, hash, prompt, false);
+        }
+
+        @Override
+        public void setResourcePack(String url, byte[] hash, BaseComponent prompt, boolean force) {
+            Preconditions.checkArgument(url != null, "Resource pack URL cannot be null");
+
+            setResourcePack(UUID.nameUUIDFromBytes(url.getBytes(StandardCharsets.UTF_8)), url, hash, prompt, force);
+        }
+
+        @Override
+        public void setResourcePack(UUID id, String url, byte[] hash, BaseComponent prompt, boolean force) {
+            Preconditions.checkArgument(url != null, "Resource pack URL cannot be null");
+
+            IChatBaseComponent nmsPrompt = (prompt != null) ? CraftChatMessage.fromJSON(ComponentSerializer.toString(prompt)) : null;
+            if (hash != null) {
+                Preconditions.checkArgument(hash.length == 20, "Resource pack hash should be 20 bytes long but was %s", hash.length);
+
+                getHandle().connection.send(new ClientboundResourcePackPushPacket(id, url, BaseEncoding.base16().lowerCase().encode(hash), force, nmsPrompt));
+            } else {
+                getHandle().connection.send(new ClientboundResourcePackPushPacket(id, url, "", force, nmsPrompt));
+            }
+        }
+
+        @Override
+        public void sendMessage(BaseComponent component) {
+            this.sendMessage(ChatMessageType.SYSTEM, component);
+        }
+
+        @Override
+        @Deprecated
+        public void sendMessage(BaseComponent... components) {
+            this.sendMessage(ChatMessageType.SYSTEM, components);
+        }
+
+        @Override
+        public void sendMessage(UUID sender, BaseComponent component) {
+            this.sendMessage(ChatMessageType.CHAT, sender, component);
+        }
+
+        @Override
+        @Deprecated
+        public void sendMessage(UUID sender, BaseComponent... components) {
+            this.sendMessage(ChatMessageType.CHAT, sender, components);
+        }
+
+        @Override
+        public void sendMessage(ChatMessageType position, BaseComponent component) {
+            this.sendMessage(position, null, component);
+        }
+
+        @Override
+        @Deprecated
+        public void sendMessage(ChatMessageType position, BaseComponent... components) {
+            this.sendMessage(position, null, components);
+        }
+
+        @Override
+        public void sendMessage(ChatMessageType position, UUID sender, BaseComponent component) {
+            if (getHandle().connection == null) {
+                return;
+            }
+
+            getHandle().connection.send(new net.minecraft.network.protocol.game.ClientboundSystemChatPacket(component, position == ChatMessageType.ACTION_BAR));
+        }
+
+        @Override
+        @Deprecated
+        public void sendMessage(ChatMessageType position, UUID sender, BaseComponent... components) {
+            if (getHandle().connection == null) {
+                return;
+            }
+
+            getHandle().connection.send(new net.minecraft.network.protocol.game.ClientboundSystemChatPacket(components, position == ChatMessageType.ACTION_BAR));
+        }
+
+        @Override
+        public void sendTitle(BaseComponent title, BaseComponent subtitle, int fadeIn, int stay, int fadeOut) {
+            ClientboundSetTitlesAnimationPacket times = new ClientboundSetTitlesAnimationPacket(fadeIn, stay, fadeOut);
+            getHandle().connection.send(times);
+
+            if (title != null) {
+                ClientboundSetTitleTextPacket packetTitle = new ClientboundSetTitleTextPacket(CraftChatMessage.fromJSON(ComponentSerializer.toString(title)));
+                getHandle().connection.send(packetTitle);
+            }
+
+            if (subtitle != null) {
+                ClientboundSetSubtitleTextPacket packetSubtitle = new ClientboundSetSubtitleTextPacket(CraftChatMessage.fromJSON(ComponentSerializer.toString(subtitle)));
+                getHandle().connection.send(packetSubtitle);
+            }
+        }
     };
 
     public Player.Spigot spigot()
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftTextDisplay.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftTextDisplay.java
index a1d8c2c59..ab0fd799d 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftTextDisplay.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftTextDisplay.java
@@ -7,6 +7,11 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.util.CraftChatMessage;
 import org.bukkit.entity.TextDisplay;
 
+// Spigot start
+import net.md_5.bungee.api.chat.BaseComponent;
+import net.md_5.bungee.chat.ComponentSerializer;
+// Spigot end
+
 public class CraftTextDisplay extends CraftDisplay implements TextDisplay {
 
     public CraftTextDisplay(CraftServer server, net.minecraft.world.entity.Display.TextDisplay entity) {
@@ -127,6 +132,24 @@ public class CraftTextDisplay extends CraftDisplay implements TextDisplay {
         }
     }
 
+    // Spigot start
+    private final TextDisplay.Spigot spigot = new TextDisplay.Spigot() {
+
+        @Override
+        public BaseComponent getText() {
+            return (getHandle().getText() != null) ? ComponentSerializer.deserialize(CraftChatMessage.toJSON(getHandle().getText())) : new net.md_5.bungee.api.chat.TextComponent();
+        }
+
+        public void setText(BaseComponent text) {
+            getHandle().setText((text != null) ? CraftChatMessage.fromJSON(ComponentSerializer.toString(text)) : net.minecraft.network.chat.IChatBaseComponent.empty());
+        }
+    };
+
+    public TextDisplay.Spigot spigot() {
+        return spigot;
+    }
+    // Spigot end
+
     private boolean getFlag(int flag) {
         return (getHandle().getFlags() & flag) != 0;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftContainer.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftContainer.java
index 715c495b5..d2c118865 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftContainer.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftContainer.java
@@ -32,6 +32,11 @@ import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.inventory.Inventory;
 import org.bukkit.inventory.InventoryView;
 
+// Spigot start
+import net.md_5.bungee.api.chat.BaseComponent;
+import net.md_5.bungee.api.chat.TextComponent;
+// Spigot end
+
 public class CraftContainer extends Container {
 
     private final InventoryView view;
@@ -49,6 +54,7 @@ public class CraftContainer extends Container {
     }
 
     public CraftContainer(final Inventory inventory, final EntityHuman player, int id) {
+        /* Spigot start - extract anonymous InventoryView to concrete class
         this(new InventoryView() {
 
             private final String originalTitle = (inventory instanceof CraftInventoryCustom) ? ((CraftInventoryCustom.MinecraftInventory) ((CraftInventory) inventory).getInventory()).getTitle() : inventory.getType().getDefaultTitle();
@@ -91,7 +97,100 @@ public class CraftContainer extends Container {
             }
 
         }, player, id);
+        */
+        this(new ContainerInventoryView(inventory, player), player, id);
+    }
+
+    private static final class ContainerInventoryView extends InventoryView {
+
+        private final String originalTitle;
+        private String title;
+
+        private final Inventory inventory;
+        private final EntityHuman player;
+
+        public ContainerInventoryView(Inventory inventory, EntityHuman player) {
+            this.inventory = inventory;
+            this.player = player;
+            this.originalTitle = (inventory instanceof CraftInventoryCustom) ? ((CraftInventoryCustom.MinecraftInventory) ((CraftInventory) inventory).getInventory()).getTitle() : inventory.getType().getDefaultTitle();
+            this.title = originalTitle;
+            this.spigot = new Spigot((inventory instanceof CraftInventoryCustom) ? ((CraftInventoryCustom.MinecraftInventory) ((CraftInventory) inventory).getInventory()).getTitleSpigot() : new TextComponent(inventory.getType().getDefaultTitle()));
+        }
+
+        @Override
+        public Inventory getTopInventory() {
+            return inventory;
+        }
+
+        @Override
+        public Inventory getBottomInventory() {
+            return getPlayer().getInventory();
+        }
+
+        @Override
+        public HumanEntity getPlayer() {
+            return player.getBukkitEntity();
+        }
+
+        @Override
+        public InventoryType getType() {
+            return inventory.getType();
+        }
+
+        @Override
+        public String getTitle() {
+            return title;
+        }
+
+        @Override
+        public String getOriginalTitle() {
+            return originalTitle;
+        }
+
+        @Override
+        public void setTitle(String title) {
+            CraftInventoryView.sendInventoryTitleChange(this, title);
+            this.title = title;
+            this.spigot.title = TextComponent.fromLegacy(title); // Spigot
+        }
+
+        private final Spigot spigot; // Instantiated above in constructor
+
+        private final class Spigot implements InventoryView.Spigot {
+
+            private final BaseComponent originalTitle;
+            private BaseComponent title;
+
+            public Spigot(BaseComponent originalTitle) {
+                this.originalTitle = originalTitle;
+                this.title = originalTitle;
+            }
+
+            @Override
+            public BaseComponent getTitle() {
+                return title;
+            }
+
+            @Override
+            public BaseComponent getOriginalTitle() {
+                return originalTitle;
+            }
+
+            @Override
+            public void setTitle(BaseComponent title) {
+                CraftInventoryView.sendInventoryTitleChange(ContainerInventoryView.this, title);
+                this.title = title;
+                ContainerInventoryView.this.title = BaseComponent.toLegacyText(title);
+            }
+        }
+
+        @Override
+        public Spigot spigot() {
+            return spigot;
+        }
+
     }
+    // Spigot end
 
     @Override
     public InventoryView getBukkitView() {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCustom.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCustom.java
index 38e2eae5a..d6f8f04cb 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCustom.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCustom.java
@@ -4,6 +4,7 @@ import com.google.common.base.Preconditions;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
+import net.md_5.bungee.api.chat.BaseComponent; // Spigot
 import net.minecraft.core.NonNullList;
 import net.minecraft.world.IInventory;
 import net.minecraft.world.entity.player.EntityHuman;
@@ -31,11 +32,22 @@ public class CraftInventoryCustom extends CraftInventory {
         super(new MinecraftInventory(owner, size, title));
     }
 
+    // Spigot start
+    public CraftInventoryCustom(InventoryHolder owner, InventoryType type, BaseComponent title) {
+        super(new MinecraftInventory(owner, type, title));
+    }
+
+    public CraftInventoryCustom(InventoryHolder owner, int size, BaseComponent title) {
+        super(new MinecraftInventory(owner, size, title));
+    }
+    // Spigot end
+
     static class MinecraftInventory implements IInventory {
         private final NonNullList<ItemStack> items;
         private int maxStack = MAX_STACK;
         private final List<HumanEntity> viewers;
         private final String title;
+        private final BaseComponent titleSpigot; // Spigot
         private InventoryType type;
         private final InventoryHolder owner;
 
@@ -49,6 +61,13 @@ public class CraftInventoryCustom extends CraftInventory {
             this.type = type;
         }
 
+        // Spigot start
+        public MinecraftInventory(InventoryHolder owner, InventoryType type, BaseComponent title) {
+            this(owner, type.getDefaultSize(), title);
+            this.type = type;
+        }
+        // Spigot end
+
         public MinecraftInventory(InventoryHolder owner, int size) {
             this(owner, size, "Chest");
         }
@@ -57,11 +76,24 @@ public class CraftInventoryCustom extends CraftInventory {
             Preconditions.checkArgument(title != null, "title cannot be null");
             this.items = NonNullList.withSize(size, ItemStack.EMPTY);
             this.title = title;
+            this.titleSpigot = net.md_5.bungee.api.chat.TextComponent.fromLegacy(title); // Spigot
             this.viewers = new ArrayList<HumanEntity>();
             this.owner = owner;
             this.type = InventoryType.CHEST;
         }
 
+        // Spigot start
+        public MinecraftInventory(InventoryHolder owner, int size, BaseComponent title) {
+            Preconditions.checkArgument(title != null, "Title cannot be null");
+            this.items = NonNullList.withSize(size, ItemStack.EMPTY);
+            this.title = BaseComponent.toLegacyText(title);
+            this.titleSpigot = title;
+            this.viewers = new ArrayList<HumanEntity>();
+            this.owner = owner;
+            this.type = InventoryType.CHEST;
+        }
+        // Spigot end
+
         @Override
         public int getContainerSize() {
             return items.size();
@@ -187,6 +219,12 @@ public class CraftInventoryCustom extends CraftInventory {
             return title;
         }
 
+        // Spigot start
+        public BaseComponent getTitleSpigot() {
+            return titleSpigot;
+        }
+        // Spigot end
+
         @Override
         public boolean isEmpty() {
             Iterator iterator = this.items.iterator();
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryView.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryView.java
index 3532ebf59..267e79b19 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryView.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryView.java
@@ -15,6 +15,11 @@ import org.bukkit.inventory.Inventory;
 import org.bukkit.inventory.InventoryView;
 import org.bukkit.inventory.ItemStack;
 
+// Spigot start
+import net.md_5.bungee.api.chat.BaseComponent;
+import net.md_5.bungee.chat.ComponentSerializer;
+// Spigot end
+
 public class CraftInventoryView extends InventoryView {
     private final Container container;
     private final CraftHumanEntity player;
@@ -29,6 +34,7 @@ public class CraftInventoryView extends InventoryView {
         this.container = container;
         this.originalTitle = CraftChatMessage.fromComponent(container.getTitle());
         this.title = originalTitle;
+        this.spigot = new Spigot(container); // Spigot
     }
 
     @Override
@@ -87,12 +93,50 @@ public class CraftInventoryView extends InventoryView {
     public void setTitle(String title) {
         sendInventoryTitleChange(this, title);
         this.title = title;
+        this.spigot.title = net.md_5.bungee.api.chat.TextComponent.fromLegacy(title); // Spigot
     }
 
     public boolean isInTop(int rawSlot) {
         return rawSlot < viewing.getSize();
     }
 
+    // Spigot start
+    private final Spigot spigot; // Instantiated above in constructor
+
+    private final class Spigot implements InventoryView.Spigot {
+
+        private final BaseComponent originalTitle;
+        private BaseComponent title;
+
+        public Spigot(Container container) {
+            this.originalTitle = ComponentSerializer.deserialize(CraftChatMessage.toJSON(container.getTitle()));
+            this.title = originalTitle;
+        }
+
+        @Override
+        public BaseComponent getTitle() {
+            return title;
+        }
+
+        @Override
+        public BaseComponent getOriginalTitle() {
+            return originalTitle;
+        }
+
+        @Override
+        public void setTitle(BaseComponent title) {
+            sendInventoryTitleChange(CraftInventoryView.this, title);
+            this.title = title;
+            CraftInventoryView.this.title = BaseComponent.toLegacyText(title);
+        }
+    }
+
+    @Override
+    public Spigot spigot() {
+        return spigot;
+    }
+    // Spigot end
+
     public Container getHandle() {
         return container;
     }
@@ -109,4 +153,20 @@ public class CraftInventoryView extends InventoryView {
         entityPlayer.connection.send(new PacketPlayOutOpenWindow(containerId, windowType, CraftChatMessage.fromString(title)[0]));
         ((Player) view.getPlayer()).updateInventory();
     }
+
+    // Spigot start
+    public static void sendInventoryTitleChange(InventoryView view, BaseComponent title) {
+        Preconditions.checkArgument(view != null, "InventoryView cannot be null");
+        Preconditions.checkArgument(title != null, "Title cannot be null");
+        Preconditions.checkArgument(view.getPlayer() instanceof Player, "NPCs are not currently supported for this function");
+        Preconditions.checkArgument(view.getTopInventory().getType().isCreatable(), "Only creatable inventories can have their title changed");
+
+        final EntityPlayer entityPlayer = (EntityPlayer) ((CraftHumanEntity) view.getPlayer()).getHandle();
+        final int containerId = entityPlayer.containerMenu.containerId;
+        final Containers<?> windowType = CraftContainer.getNotchInventoryType(view.getTopInventory());
+        final net.minecraft.network.chat.IChatBaseComponent nmsTitle = CraftChatMessage.fromJSON(ComponentSerializer.toString(title));
+        entityPlayer.connection.send(new PacketPlayOutOpenWindow(containerId, windowType, nmsTitle));
+        ((Player) view.getPlayer()).updateInventory();
+    }
+    // Spigot end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchantCustom.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchantCustom.java
index 87325cc41..26e279333 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchantCustom.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchantCustom.java
@@ -18,6 +18,13 @@ public class CraftMerchantCustom extends CraftMerchant {
         getMerchant().craftMerchant = this;
     }
 
+    // Spigot start
+    public CraftMerchantCustom(net.md_5.bungee.api.chat.BaseComponent title) {
+        super(new MinecraftMerchant(CraftChatMessage.fromJSON(net.md_5.bungee.chat.ComponentSerializer.toString(title))));
+        getMerchant().craftMerchant = this;
+    }
+    // Spigot end
+
     @Override
     public String toString() {
         return "CraftMerchantCustom";
@@ -40,6 +47,13 @@ public class CraftMerchantCustom extends CraftMerchant {
             this.title = CraftChatMessage.fromString(title)[0];
         }
 
+        // Spigot start
+        public MinecraftMerchant(IChatBaseComponent title) {
+            Preconditions.checkArgument(title != null, "Title cannot be null");
+            this.title = title;
+        }
+        // Spigot end
+
         @Override
         public CraftMerchant getCraftMerchant() {
             return craftMerchant;
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
index dfde2c619..9e8f2a715 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
@@ -22,6 +22,9 @@ import org.bukkit.inventory.meta.BookMeta;
 
 // Spigot start
 import static org.spigotmc.ValidateUtils.*;
+import java.util.AbstractList;
+import net.md_5.bungee.api.chat.BaseComponent;
+import net.md_5.bungee.chat.ComponentSerializer;
 // Spigot end
 
 @DelegateDeserialization(SerializableMeta.class)
@@ -351,7 +354,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
         if (this.pages != null) {
             meta.pages = new ArrayList<String>(this.pages);
         }
-        meta.spigot = meta.new SpigotMeta(); // Spigot
+        meta.spigot = meta.new SpigotMeta(super.spigot()); // Spigot
         return meta;
     }
 
@@ -426,8 +429,127 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
     }
 
     // Spigot start
-    private BookMeta.Spigot spigot = new SpigotMeta();
+    private BookMeta.Spigot spigot = new SpigotMeta(super.spigot());
     private class SpigotMeta extends BookMeta.Spigot {
+
+        /*
+         * Because we can't extend two classes (BookMeta.Spigot and CraftMetaItem.SpigotMeta), the ItemMeta.Spigot
+         * instance from the parent has to be passed through the constructor and all methods from ItemMeta.Spigot
+         * re-implemented and delegating to the parent instance. This is not clean, but it's the only way to do this.
+         */
+        private final org.bukkit.inventory.meta.ItemMeta.Spigot parent;
+
+        public SpigotMeta(org.bukkit.inventory.meta.ItemMeta.Spigot parent) {
+            this.parent = parent;
+        }
+
+        @Override
+        public BaseComponent getDisplayName() {
+            return parent.getDisplayName();
+        }
+
+        @Override
+        public void setDisplayName(BaseComponent displayName) {
+            this.parent.setDisplayName(displayName);
+        }
+
+        @Override
+        public List<BaseComponent> getLore() {
+            return parent.getLore();
+        }
+
+        @Override
+        public void setLore(List<BaseComponent> lore) {
+            this.parent.setLore(lore);
+        }
+
+        private String pageToJSON(String page) {
+            if (CraftMetaBook.this instanceof CraftMetaBookSigned) {
+                // Page data is already in JSON format:
+                return page;
+            } else {
+                // Convert from plain String to JSON (similar to conversion between writable books and written books):
+                IChatBaseComponent component = CraftChatMessage.fromString(page, true, true)[0];
+                return CraftChatMessage.toJSON(component);
+            }
+        }
+
+        private String componentsToPage(BaseComponent[] components) {
+            // asserted: components != null
+            if (CraftMetaBook.this instanceof CraftMetaBookSigned) {
+                // Pages are in JSON format:
+                return ComponentSerializer.toString(components);
+            } else {
+                // Convert component to plain String:
+                return CraftChatMessage.fromJSONComponent(ComponentSerializer.toString(components));
+            }
+        }
+
+        @Override
+        public BaseComponent[] getPage(final int page) {
+            Preconditions.checkArgument(isValidPage(page), "Invalid page number");
+            return ComponentSerializer.parse(pageToJSON(pages.get(page - 1)));
+        }
+
+        @Override
+        public void setPage(final int page, final BaseComponent... text) {
+            if (!isValidPage(page)) {
+                throw new IllegalArgumentException("Invalid page number " + page + "/" + getPageCount());
+            }
+
+            BaseComponent[] newText = text == null ? new BaseComponent[0] : text;
+            CraftMetaBook.this.pages.set(page - 1, componentsToPage(newText));
+        }
+
+        @Override
+        public void setPages(final BaseComponent[]... pages) {
+            setPages(Arrays.asList(pages));
+        }
+
+        @Override
+        public void addPage(final BaseComponent[]... pages) {
+            for (BaseComponent[] page : pages) {
+                if (page == null) {
+                    page = new BaseComponent[0];
+                }
+
+                CraftMetaBook.this.internalAddPage(componentsToPage(page));
+            }
+        }
+
+        @Override
+        public List<BaseComponent[]> getPages() {
+            if (CraftMetaBook.this.pages == null) return ImmutableList.of();
+            final List<String> copy = ImmutableList.copyOf(CraftMetaBook.this.pages);
+            return new AbstractList<BaseComponent[]>() {
+
+                @Override
+                public BaseComponent[] get(int index) {
+                    return ComponentSerializer.parse(pageToJSON(copy.get(index)));
+                }
+
+                @Override
+                public int size() {
+                    return copy.size();
+                }
+            };
+        }
+
+        @Override
+        public void setPages(List<BaseComponent[]> pages) {
+            if (pages.isEmpty()) {
+                CraftMetaBook.this.pages = null;
+                return;
+            }
+
+            if (CraftMetaBook.this.pages != null) {
+                CraftMetaBook.this.pages.clear();
+            }
+
+            for (BaseComponent[] page : pages) {
+                addPage(page);
+            }
+        }
     };
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
index aa820d2e9..2a4eae52b 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
@@ -80,6 +80,8 @@ import org.bukkit.inventory.meta.tags.CustomItemTagContainer;
 import org.bukkit.persistence.PersistentDataContainer;
 
 // Spigot start
+import net.md_5.bungee.api.chat.BaseComponent;
+import net.md_5.bungee.chat.ComponentSerializer;
 import static org.spigotmc.ValidateUtils.*;
 // Spigot end
 
@@ -1390,6 +1392,48 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         this.version = version;
     }
 
+    // Spigot start
+    private final SpigotMeta spigot = new SpigotMeta();
+
+    protected class SpigotMeta extends ItemMeta.Spigot {
+
+        @Override
+        public BaseComponent getDisplayName() {
+            return (displayName != null) ? ComponentSerializer.deserialize(displayName) : null;
+        }
+
+        @Override
+        public void setDisplayName(BaseComponent displayName) {
+            CraftMetaItem.this.displayName = (displayName != null) ? ComponentSerializer.toString(displayName) : null;
+        }
+
+        @Override
+        public List<BaseComponent> getLore() {
+            return (CraftMetaItem.this.lore == null) ? null : new ArrayList<>(Lists.transform(CraftMetaItem.this.lore, ComponentSerializer::deserialize));
+        }
+
+        @Override
+        public void setLore(List<BaseComponent> lore) {
+            if (lore == null || lore.isEmpty()) {
+                CraftMetaItem.this.lore = null;
+            } else {
+                if (CraftMetaItem.this.lore == null) {
+                    CraftMetaItem.this.lore = new ArrayList<>(lore.size());
+                } else {
+                    CraftMetaItem.this.lore.clear();
+                }
+
+                safelyAdd(Lists.transform(lore, ComponentSerializer::toString), CraftMetaItem.this.lore, true);
+            }
+        }
+
+    };
+
+    public ItemMeta.Spigot spigot() {
+        return spigot;
+    }
+    // Spigot end
+
     public static Set<String> getHandledTags() {
         synchronized (HANDLED_TAGS) {
             if (HANDLED_TAGS.isEmpty()) {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/util/CraftCustomInventoryConverter.java b/src/main/java/org/bukkit/craftbukkit/inventory/util/CraftCustomInventoryConverter.java
index ed4415f6d..6bb9a0d3a 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/util/CraftCustomInventoryConverter.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/util/CraftCustomInventoryConverter.java
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit.inventory.util;
 
+import net.md_5.bungee.api.chat.BaseComponent; // Spigot
 import org.bukkit.craftbukkit.inventory.CraftInventoryCustom;
 import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.inventory.Inventory;
@@ -24,4 +25,15 @@ public class CraftCustomInventoryConverter implements CraftInventoryCreator.Inve
     public Inventory createInventory(InventoryHolder owner, int size, String title) {
         return new CraftInventoryCustom(owner, size, title);
     }
+
+    // Spigot start
+    @Override
+    public Inventory createInventory(InventoryHolder owner, InventoryType type, BaseComponent title) {
+        return new CraftInventoryCustom(owner, type, title);
+    }
+
+    public Inventory createInventory(InventoryHolder owner, int size, BaseComponent title) {
+        return new CraftInventoryCustom(owner, size, title);
+    }
+    // Spigot end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/util/CraftInventoryCreator.java b/src/main/java/org/bukkit/craftbukkit/inventory/util/CraftInventoryCreator.java
index 52cdf39c6..b40c86eb6 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/util/CraftInventoryCreator.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/util/CraftInventoryCreator.java
@@ -2,6 +2,7 @@ package org.bukkit.craftbukkit.inventory.util;
 
 import java.util.HashMap;
 import java.util.Map;
+import net.md_5.bungee.api.chat.BaseComponent; // Spigot
 import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.inventory.Inventory;
 import org.bukkit.inventory.InventoryHolder;
@@ -57,10 +58,22 @@ public final class CraftInventoryCreator {
         return DEFAULT_CONVERTER.createInventory(holder, size, title);
     }
 
+    // Spigot start
+    public Inventory createInventory(InventoryHolder holder, InventoryType type, BaseComponent title) {
+        return converterMap.get(type).createInventory(holder, type, title);
+    }
+
+    public Inventory createInventory(InventoryHolder holder, int size, BaseComponent title) {
+        return DEFAULT_CONVERTER.createInventory(holder, size, title);
+    }
+    // Spigot end
+
     public interface InventoryConverter {
 
         Inventory createInventory(InventoryHolder holder, InventoryType type);
 
         Inventory createInventory(InventoryHolder holder, InventoryType type, String title);
+
+        Inventory createInventory(InventoryHolder holder, InventoryType type, BaseComponent title); // Spigot
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/util/CraftTileInventoryConverter.java b/src/main/java/org/bukkit/craftbukkit/inventory/util/CraftTileInventoryConverter.java
index 44b8a4b70..df57c14da 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/util/CraftTileInventoryConverter.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/util/CraftTileInventoryConverter.java
@@ -43,6 +43,18 @@ public abstract class CraftTileInventoryConverter implements CraftInventoryCreat
         return getInventory(te);
     }
 
+    // Spigot start
+    @Override
+    public Inventory createInventory(InventoryHolder holder, InventoryType type, net.md_5.bungee.api.chat.BaseComponent title) {
+        IInventory te = getTileEntity();
+        if (te instanceof TileEntityLootable) {
+            ((TileEntityLootable) te).setCustomName(title != null ? CraftChatMessage.fromJSON(net.md_5.bungee.chat.ComponentSerializer.toString(title)) : null);
+        }
+
+        return getInventory(te);
+    }
+    // Spigot end
+
     public Inventory getInventory(IInventory tileEntity) {
         return new CraftInventory(tileEntity);
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftObjective.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftObjective.java
index 214c210a8..03bfa046f 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftObjective.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftObjective.java
@@ -11,6 +11,11 @@ import org.bukkit.scoreboard.Objective;
 import org.bukkit.scoreboard.RenderType;
 import org.bukkit.scoreboard.Score;
 
+// Spigot start
+import net.md_5.bungee.api.chat.BaseComponent;
+import net.md_5.bungee.chat.ComponentSerializer;
+// Spigot end
+
 final class CraftObjective extends CraftScoreboardComponent implements Objective {
     private final ScoreboardObjective objective;
     private final CraftCriteria criteria;
@@ -163,5 +168,31 @@ final class CraftObjective extends CraftScoreboardComponent implements Objective
         return !(this.objective != other.objective && (this.objective == null || !this.objective.equals(other.objective)));
     }
 
+    // Spigot start
+    private final Spigot spigot = new Spigot();
+
+    private final class Spigot implements Objective.Spigot {
+
+        @Override
+        public BaseComponent getDisplayName() {
+            checkState();
+
+            return ComponentSerializer.deserialize(CraftChatMessage.toJSON(objective.getDisplayName()));
+        }
+
+        @Override
+        public void setDisplayName(BaseComponent displayName) {
+            Preconditions.checkArgument(displayName != null, "Display name cannot be null");
+
+            checkState();
+            objective.setDisplayName(CraftChatMessage.fromJSON(ComponentSerializer.toString(displayName)));
+        }
+    }
+
+    @Override
+    public Spigot spigot() {
+        return spigot;
+    }
+    // Spigot end
 
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java
index 395456282..8f57f4d7a 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java
@@ -4,6 +4,7 @@ import com.google.common.base.Function;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Iterables;
+import net.md_5.bungee.api.chat.BaseComponent; // Spigot
 import net.minecraft.world.scores.ScoreHolder;
 import net.minecraft.world.scores.Scoreboard;
 import net.minecraft.world.scores.ScoreboardObjective;
@@ -215,6 +216,37 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
         return board;
     }
 
+    // Spigot start
+    private final Spigot spigot = new Spigot();
+
+    private final class Spigot implements org.bukkit.scoreboard.Scoreboard.Spigot {
+
+        @Override
+        public Objective registerNewObjective(String name, Criteria criteria, BaseComponent displayName) {
+            return registerNewObjective(name, criteria, displayName, RenderType.INTEGER);
+        }
+
+        @Override
+        public Objective registerNewObjective(String name, Criteria criteria, BaseComponent displayName, RenderType renderType) {
+            Preconditions.checkArgument(name != null, "Objective name cannot be null");
+            Preconditions.checkArgument(criteria != null, "Criteria cannot be null");
+            Preconditions.checkArgument(displayName != null, "Display name cannot be null");
+            Preconditions.checkArgument(renderType != null, "RenderType cannot be null");
+            Preconditions.checkArgument(name.length() <= Short.MAX_VALUE, "The name '%s' is longer than the limit of 32767 characters (%s)", name, name.length());
+            Preconditions.checkArgument(board.getObjective(name) == null, "An objective of name '%s' already exists", name);
+
+            net.minecraft.network.chat.IChatBaseComponent nmsDisplayName = CraftChatMessage.fromJSON(net.md_5.bungee.chat.ComponentSerializer.toString(displayName));
+            ScoreboardObjective objective = board.addObjective(name, ((CraftCriteria) criteria).criteria, nmsDisplayName, CraftScoreboardTranslations.fromBukkitRender(renderType), true, null);
+            return new CraftObjective(CraftScoreboard.this, objective);
+        }
+    }
+
+    @Override
+    public Spigot spigot() {
+        return spigot;
+    }
+    // Spigot end
+
     static ScoreHolder getScoreHolder(String entry) {
         return () -> entry;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
index dbfbb9570..e2fbcf3f8 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
@@ -13,6 +13,11 @@ import org.bukkit.craftbukkit.util.CraftChatMessage;
 import org.bukkit.scoreboard.NameTagVisibility;
 import org.bukkit.scoreboard.Team;
 
+// Spigot start
+import net.md_5.bungee.api.chat.BaseComponent;
+import net.md_5.bungee.chat.ComponentSerializer;
+// Spigot end
+
 final class CraftTeam extends CraftScoreboardComponent implements Team {
     private final ScoreboardTeam team;
 
@@ -304,4 +309,58 @@ final class CraftTeam extends CraftScoreboardComponent implements Team {
         return !(this.team != other.team && (this.team == null || !this.team.equals(other.team)));
     }
 
+    // Spigot start
+    private final Spigot spigot = new Spigot();
+
+    private final class Spigot implements Team.Spigot {
+
+        @Override
+        public BaseComponent getDisplayName() {
+            checkState();
+            return ComponentSerializer.deserialize(CraftChatMessage.toJSON(team.getDisplayName()));
+        }
+
+        @Override
+        public void setDisplayName(BaseComponent displayName) {
+            Preconditions.checkArgument(displayName != null, "Display name cannot be null");
+
+            checkState();
+            team.setDisplayName(CraftChatMessage.fromJSON(ComponentSerializer.toString(displayName)));
+        }
+
+        @Override
+        public BaseComponent getPrefix() {
+            checkState();
+            return ComponentSerializer.deserialize(CraftChatMessage.toJSON(team.getPlayerPrefix()));
+        }
+
+        @Override
+        public void setPrefix(BaseComponent prefix) {
+            Preconditions.checkArgument(prefix != null, "Prefix cannot be null");
+
+            checkState();
+            team.setPlayerPrefix(CraftChatMessage.fromJSON(ComponentSerializer.toString(prefix)));
+        }
+
+        @Override
+        public BaseComponent getSuffix() {
+            checkState();
+            return ComponentSerializer.deserialize(CraftChatMessage.toJSON(team.getPlayerSuffix()));
+        }
+
+        @Override
+        public void setSuffix(BaseComponent suffix) {
+            Preconditions.checkArgument(suffix != null, "Suffix cannot be null");
+
+            checkState();
+            team.setPlayerSuffix(CraftChatMessage.fromJSON(ComponentSerializer.toString(suffix)));
+        }
+    }
+
+    @Override
+    public Spigot spigot() {
+        return spigot;
+    }
+    // Spigot end
+
 }
-- 
2.42.0.windows.2

