From 09d2d2bbcb5bdcf046896c5fff54264634f2de35 Mon Sep 17 00:00:00 2001
From: BuildTools <unconfigured@null.spigotmc.org>
Date: Fri, 31 Jan 2020 20:01:17 +0100
Subject: [PATCH] Damage with any damage cause


diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index fb44497b..dae5c3f9 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -1394,7 +1394,12 @@ public abstract class Entity implements INamableTileEntity, ICommandListener {
         this.velocityChanged = true;
     }
 
+    // CraftBukkit start
     public boolean damageEntity(DamageSource damagesource, float f) {
+        return damageEntity(damagesource, f, null);
+    }
+
+    public boolean damageEntity(DamageSource damagesource, float f, Entity damager) {
         if (this.isInvulnerable(damagesource)) {
             return false;
         } else {
@@ -1402,6 +1407,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener {
             return false;
         }
     }
+    // CraftBukkit end
 
     public final Vec3D f(float f) {
         return this.c(this.g(f), this.h(f));
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragonPart.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragonPart.java
index e6d05009..68e46fad 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragonPart.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragonPart.java
@@ -5,6 +5,7 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EnderDragon;
 import org.bukkit.entity.EnderDragonPart;
 import org.bukkit.entity.Entity;
+import org.bukkit.event.entity.EntityDamageEvent;
 
 public class CraftEnderDragonPart extends CraftComplexPart implements EnderDragonPart {
     public CraftEnderDragonPart(CraftServer server, EntityComplexPart entity) {
@@ -36,6 +37,16 @@ public class CraftEnderDragonPart extends CraftComplexPart implements EnderDrago
         getParent().damage(amount, source);
     }
 
+    @Override
+    public void damage(double amount, EntityDamageEvent.DamageCause damageCause) {
+        getParent().damage(amount, damageCause);
+    }
+
+    @Override
+    public void damage(double amount, EntityDamageEvent.DamageCause damageCause, Entity source) {
+        getParent().damage(amount, damageCause, source);
+    }
+
     @Override
     public double getHealth() {
         return getParent().getHealth();
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
index 9c1d4e75..85a20fe5 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
@@ -44,11 +44,13 @@ import org.bukkit.attribute.AttributeInstance;
 import org.bukkit.block.Block;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.inventory.CraftEntityEquipment;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.potion.CraftPotionUtil;
 import org.bukkit.craftbukkit.entity.memory.CraftMemoryKey;
 import org.bukkit.craftbukkit.entity.memory.CraftMemoryMapper;
+import org.bukkit.craftbukkit.util.DamageUtils;
 import org.bukkit.entity.AbstractArrow;
 import org.bukkit.entity.DragonFireball;
 import org.bukkit.entity.Egg;
@@ -73,6 +75,7 @@ import org.bukkit.entity.TippedArrow;
 import org.bukkit.entity.Trident;
 import org.bukkit.entity.WitherSkull;
 import org.bukkit.entity.memory.MemoryKey;
+import org.bukkit.event.entity.EntityDamageEvent;
 import org.bukkit.event.entity.EntityPotionEffectEvent;
 import org.bukkit.event.player.PlayerTeleportEvent;
 import org.bukkit.inventory.EntityEquipment;
@@ -242,7 +245,7 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
 
     @Override
     public void damage(double amount) {
-        damage(amount, null);
+        damage(amount, (org.bukkit.entity.Entity) null);
     }
 
     @Override
@@ -258,6 +261,20 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
         entity.damageEntity(reason, (float) amount);
     }
 
+    @Override
+    public void damage(double amount, EntityDamageEvent.DamageCause damageCause) {
+        DamageSource reason = DamageUtils.damageCauseToDamageSource(damageCause, null);
+        entity.damageEntity(reason, (float) amount);
+    }
+
+    @Override
+    public void damage(double amount, EntityDamageEvent.DamageCause damageCause, org.bukkit.entity.Entity source) {
+        net.minecraft.server.Entity handle = ((CraftEntity) source).getHandle();
+        DamageSource reason = DamageUtils.damageCauseToDamageSource(damageCause, handle);
+        CraftEventFactory.entityDamage = handle;
+        entity.damageEntity(reason, (float) amount);
+    }
+
     @Override
     public Location getEyeLocation() {
         Location loc = getLocation();
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index 72b8677f..a7f0d9ed 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -90,6 +90,7 @@ import org.bukkit.craftbukkit.potion.CraftPotionUtil;
 import org.bukkit.craftbukkit.util.CraftDamageSource;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+import org.bukkit.craftbukkit.util.DamageUtils;
 import org.bukkit.entity.AbstractHorse;
 import org.bukkit.entity.AreaEffectCloud;
 import org.bukkit.entity.Bat;
@@ -767,10 +768,11 @@ public class CraftEventFactory {
     }
 
     private static EntityDamageEvent handleEntityDamageEvent(Entity entity, DamageSource source, Map<DamageModifier, Double> modifiers, Map<DamageModifier, Function<? super Double, Double>> modifierFunctions, boolean cancelled) {
+        Entity damager = entityDamage;
+        entityDamage = null;
+
         if (source.isExplosion()) {
             DamageCause damageCause;
-            Entity damager = entityDamage;
-            entityDamage = null;
             EntityDamageEvent event;
             if (damager == null) {
                 event = new EntityDamageByBlockEvent(null, entity.getBukkitEntity(), DamageCause.BLOCK_EXPLOSION, modifiers, modifierFunctions);
@@ -793,7 +795,7 @@ public class CraftEventFactory {
             }
             return event;
         } else if (source instanceof EntityDamageSource) {
-            Entity damager = source.getEntity();
+            damager = source.getEntity();
             DamageCause cause = (source.isSweep()) ? DamageCause.ENTITY_SWEEP_ATTACK : DamageCause.ENTITY_ATTACK;
 
             if (source instanceof EntityDamageSourceIndirect) {
@@ -809,7 +811,13 @@ public class CraftEventFactory {
 
             return callEntityDamageEvent(damager, entity, cause, modifiers, modifierFunctions, cancelled);
         } else if (source == DamageSource.OUT_OF_WORLD) {
-            EntityDamageEvent event = new EntityDamageByBlockEvent(null, entity.getBukkitEntity(), DamageCause.VOID, modifiers, modifierFunctions);
+            EntityDamageEvent event;
+            if (damager == null) {
+                event = new EntityDamageByBlockEvent(null, entity.getBukkitEntity(), DamageCause.VOID, modifiers, modifierFunctions);
+            } else {
+                event = new EntityDamageByEntityEvent(damager.getBukkitEntity(), entity.getBukkitEntity(), DamageCause.VOID, modifiers, modifierFunctions);
+            }
+
             event.setCancelled(cancelled);
             callEvent(event);
             if (!event.isCancelled()) {
@@ -817,7 +825,13 @@ public class CraftEventFactory {
             }
             return event;
         } else if (source == DamageSource.LAVA) {
-            EntityDamageEvent event = (new EntityDamageByBlockEvent(null, entity.getBukkitEntity(), DamageCause.LAVA, modifiers, modifierFunctions));
+
+            EntityDamageEvent event;
+            if (damager == null) {
+                event = new EntityDamageByBlockEvent(null, entity.getBukkitEntity(), DamageCause.LAVA, modifiers, modifierFunctions);
+            } else {
+                event = new EntityDamageByEntityEvent(damager.getBukkitEntity(), entity.getBukkitEntity(), DamageCause.LAVA, modifiers, modifierFunctions);
+            }
             event.setCancelled(cancelled);
             callEvent(event);
             if (!event.isCancelled()) {
@@ -826,7 +840,7 @@ public class CraftEventFactory {
             return event;
         } else if (blockDamage != null) {
             DamageCause cause = null;
-            Block damager = blockDamage;
+            Block blockDamager = blockDamage;
             blockDamage = null;
             if (source == DamageSource.CACTUS || source == DamageSource.SWEET_BERRY_BUSH) {
                 cause = DamageCause.CONTACT;
@@ -835,71 +849,26 @@ public class CraftEventFactory {
             } else if (source == DamageSource.MAGIC) {
                 cause = DamageCause.MAGIC;
             } else {
-                throw new IllegalStateException(String.format("Unhandled damage of %s by %s from %s", entity, damager, source.translationIndex));
-            }
-            EntityDamageEvent event = new EntityDamageByBlockEvent(damager, entity.getBukkitEntity(), cause, modifiers, modifierFunctions);
-            event.setCancelled(cancelled);
-            callEvent(event);
-            if (!event.isCancelled()) {
-                event.getEntity().setLastDamageCause(event);
+                throw new IllegalStateException(String.format("Unhandled damage of %s by %s from %s", entity, blockDamager, source.translationIndex));
             }
-            return event;
-        } else if (entityDamage != null) {
-            DamageCause cause = null;
-            CraftEntity damager = entityDamage.getBukkitEntity();
-            entityDamage = null;
-            if (source == DamageSource.ANVIL || source == DamageSource.FALLING_BLOCK) {
-                cause = DamageCause.FALLING_BLOCK;
-            } else if (damager instanceof LightningStrike) {
-                cause = DamageCause.LIGHTNING;
-            } else if (source == DamageSource.FALL) {
-                cause = DamageCause.FALL;
-            } else if (source == DamageSource.DRAGON_BREATH) {
-                cause = DamageCause.DRAGON_BREATH;
-            } else if (source == DamageSource.MAGIC) {
-                cause = DamageCause.MAGIC;
+            EntityDamageEvent event;
+            if (damager == null) {
+                event = new EntityDamageByBlockEvent(blockDamager, entity.getBukkitEntity(), cause, modifiers, modifierFunctions);
             } else {
-                throw new IllegalStateException(String.format("Unhandled damage of %s by %s from %s", entity, damager.getHandle(), source.translationIndex));
+                event = new EntityDamageByEntityEvent(damager.getBukkitEntity(), entity.getBukkitEntity(), cause, modifiers, modifierFunctions);
             }
-            EntityDamageEvent event = new EntityDamageByEntityEvent(damager, entity.getBukkitEntity(), cause, modifiers, modifierFunctions);
             event.setCancelled(cancelled);
             callEvent(event);
             if (!event.isCancelled()) {
                 event.getEntity().setLastDamageCause(event);
             }
             return event;
+        } else if (damager != null) {
+            DamageCause cause = DamageUtils.damageSourceToDamageCause(source, damager, entity);
+            return callEntityDamageEvent(damager, entity, cause, modifiers, modifierFunctions, cancelled);
         }
 
-        DamageCause cause = null;
-        if (source == DamageSource.FIRE) {
-            cause = DamageCause.FIRE;
-        } else if (source == DamageSource.STARVE) {
-            cause = DamageCause.STARVATION;
-        } else if (source == DamageSource.WITHER) {
-            cause = DamageCause.WITHER;
-        } else if (source == DamageSource.STUCK) {
-            cause = DamageCause.SUFFOCATION;
-        } else if (source == DamageSource.DROWN) {
-            cause = DamageCause.DROWNING;
-        } else if (source == DamageSource.BURN) {
-            cause = DamageCause.FIRE_TICK;
-        } else if (source == MELTING) {
-            cause = DamageCause.MELTING;
-        } else if (source == POISON) {
-            cause = DamageCause.POISON;
-        } else if (source == DamageSource.MAGIC) {
-            cause = DamageCause.MAGIC;
-        } else if (source == DamageSource.FALL) {
-            cause = DamageCause.FALL;
-        } else if (source == DamageSource.FLY_INTO_WALL) {
-            cause = DamageCause.FLY_INTO_WALL;
-        } else if (source == DamageSource.CRAMMING) {
-            cause = DamageCause.CRAMMING;
-        } else if (source == DamageSource.DRYOUT) {
-            cause = DamageCause.DRYOUT;
-        } else if (source == DamageSource.GENERIC) {
-            cause = DamageCause.CUSTOM;
-        }
+        DamageCause cause = DamageUtils.damageSourceToDamageCause(source, damager, entity);
 
         if (cause != null) {
             return callEntityDamageEvent(null, entity, cause, modifiers, modifierFunctions, cancelled);
diff --git a/src/main/java/org/bukkit/craftbukkit/util/DamageUtils.java b/src/main/java/org/bukkit/craftbukkit/util/DamageUtils.java
new file mode 100644
index 00000000..1be3af0b
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/util/DamageUtils.java
@@ -0,0 +1,150 @@
+package org.bukkit.craftbukkit.util;
+
+import net.minecraft.server.*;
+import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.entity.LightningStrike;
+import org.bukkit.event.entity.EntityDamageEvent;
+
+import javax.annotation.Nullable;
+
+public final class DamageUtils {
+
+    /**
+     * Method to convert bukkit's DamageCause to NMS' DamageSource
+     *
+     * The metod wont work with 100% DamageSources, for example Bukkit/Craftbukkit does not recognize between
+     * DamageCause.CACTUS and DamageCause.SWEET_BERRY_BUSH, however nms does.
+     *
+     * Another example could be DamageCause.SUICIDE - Its purely Bukkit/Craftbukkit implementation detail, and
+     * has no counterpart within nms.
+     *
+     * @param damageCause to be converted to DamageSource
+     * @param attackingEntity entity, which triggered the damage
+     * @return DamageSource
+
+     */
+    public static DamageSource damageCauseToDamageSource(EntityDamageEvent.DamageCause damageCause, Entity attackingEntity) {
+
+        switch (damageCause) {
+            case CONTACT:
+                return DamageSource.CACTUS;
+            case ENTITY_ATTACK:
+                if (attackingEntity instanceof EntityHuman) {
+                    return DamageSource.playerAttack((EntityHuman) attackingEntity);
+                }
+                if (attackingEntity instanceof EntityLiving) {
+                    return DamageSource.mobAttack((EntityLiving) attackingEntity);
+                }
+                return DamageSource.GENERIC;
+            case ENTITY_SWEEP_ATTACK:
+                if (attackingEntity instanceof EntityHuman) {
+                    return DamageSource.playerAttack((EntityHuman) attackingEntity).sweep();
+                }
+                if (attackingEntity instanceof EntityLiving) {
+                    return DamageSource.mobAttack((EntityLiving) attackingEntity).sweep();
+                }
+                return DamageSource.GENERIC;
+            case PROJECTILE:
+                if (attackingEntity instanceof EntityProjectile) {
+                    EntityProjectile projectile = (EntityProjectile) attackingEntity;
+                    return DamageSource.projectile(projectile, projectile.shooter);
+                }
+                return DamageSource.GENERIC;
+            case SUFFOCATION:
+                return DamageSource.STUCK;
+            case FALL:
+                return DamageSource.FALL;
+            case FIRE:
+                return DamageSource.FIRE;
+            case FIRE_TICK:
+                return DamageSource.BURN;
+            case MELTING:
+                return CraftEventFactory.MELTING;
+            case LAVA:
+                return DamageSource.LAVA;
+            case DROWNING:
+                return DamageSource.DROWN;
+            case VOID:
+                return DamageSource.OUT_OF_WORLD;
+            case LIGHTNING:
+                return DamageSource.LIGHTNING;
+            case STARVATION:
+                return DamageSource.STARVE;
+            case POISON:
+                return CraftEventFactory.POISON;
+            case MAGIC:
+                return DamageSource.MAGIC;
+            case WITHER:
+                return DamageSource.WITHER;
+            case FALLING_BLOCK:
+                return DamageSource.FALLING_BLOCK;
+            case THORNS:
+                if (attackingEntity == null) {
+                    return DamageSource.GENERIC;
+                }
+                return DamageSource.a(attackingEntity);
+            case DRAGON_BREATH:
+                return DamageSource.DRAGON_BREATH;
+            case CUSTOM:
+                return DamageSource.GENERIC;
+            case FLY_INTO_WALL:
+                return DamageSource.FLY_INTO_WALL;
+            case HOT_FLOOR:
+                return DamageSource.HOT_FLOOR;
+            case CRAMMING:
+                return DamageSource.CRAMMING;
+            case DRYOUT:
+                return DamageSource.DRYOUT;
+
+        }
+        return DamageSource.GENERIC;
+    }
+
+    public static EntityDamageEvent.DamageCause damageSourceToDamageCause(DamageSource source, @Nullable Entity damager, Entity damagee) {
+        if (source == DamageSource.ANVIL || source == DamageSource.FALLING_BLOCK) {
+            return EntityDamageEvent.DamageCause.FALLING_BLOCK;
+        } else if (damager instanceof LightningStrike || source == DamageSource.LIGHTNING) {
+            return EntityDamageEvent.DamageCause.LIGHTNING;
+        } else if (source == DamageSource.FALL) {
+            return EntityDamageEvent.DamageCause.FALL;
+        } else if (source == DamageSource.DRAGON_BREATH) {
+            return EntityDamageEvent.DamageCause.DRAGON_BREATH;
+        } else if (source == DamageSource.MAGIC) {
+            return EntityDamageEvent.DamageCause.MAGIC;
+        } else if (source == DamageSource.FIRE) {
+            return EntityDamageEvent.DamageCause.FIRE;
+        } else if (source == DamageSource.STARVE) {
+            return EntityDamageEvent.DamageCause.STARVATION;
+        } else if (source == DamageSource.WITHER) {
+            return EntityDamageEvent.DamageCause.WITHER;
+        } else if (source == DamageSource.STUCK) {
+            return EntityDamageEvent.DamageCause.SUFFOCATION;
+        } else if (source == DamageSource.DROWN) {
+            return EntityDamageEvent.DamageCause.DROWNING;
+        } else if (source == DamageSource.BURN) {
+            return EntityDamageEvent.DamageCause.FIRE_TICK;
+        } else if (source == CraftEventFactory.MELTING) {
+            return EntityDamageEvent.DamageCause.MELTING;
+        } else if (source == CraftEventFactory.POISON) {
+            return EntityDamageEvent.DamageCause.POISON;
+        } else if (source == DamageSource.FLY_INTO_WALL) {
+            return EntityDamageEvent.DamageCause.FLY_INTO_WALL;
+        } else if (source == DamageSource.CRAMMING) {
+            return EntityDamageEvent.DamageCause.CRAMMING;
+        } else if (source == DamageSource.DRYOUT) {
+            return EntityDamageEvent.DamageCause.DRYOUT;
+        } else if (source == DamageSource.GENERIC) {
+            return EntityDamageEvent.DamageCause.CUSTOM;
+        } else if (source == DamageSource.CACTUS) {
+            return EntityDamageEvent.DamageCause.CONTACT;
+        } else if (source == DamageSource.SWEET_BERRY_BUSH) {
+            return EntityDamageEvent.DamageCause.CONTACT;
+        } else if (source == DamageSource.HOT_FLOOR) {
+            return EntityDamageEvent.DamageCause.HOT_FLOOR;
+        } else {
+            throw new IllegalStateException(String.format("Unhandled damage of %s by %s from %s", damagee, (damager == null ? "null" : damager), source.translationIndex));
+        }
+    }
+
+}
-- 
2.22.0.windows.1

