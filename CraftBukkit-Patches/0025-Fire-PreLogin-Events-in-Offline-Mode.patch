From 7fdc9b73b17b7925b21e3557656452143c4fe9ae Mon Sep 17 00:00:00 2001
From: md_5 <git@md-5.net>
Date: Wed, 18 Dec 2013 13:32:10 +1100
Subject: [PATCH] Fire PreLogin Events in Offline Mode


diff --git a/src/main/java/net/minecraft/server/network/LoginListener.java b/src/main/java/net/minecraft/server/network/LoginListener.java
index f907de9429..61e8ab5d3d 100644
--- a/src/main/java/net/minecraft/server/network/LoginListener.java
+++ b/src/main/java/net/minecraft/server/network/LoginListener.java
@@ -141,7 +141,20 @@ public class LoginListener implements PacketLoginInListener, TickablePacketListe
                 this.state = LoginListener.EnumProtocolState.KEY;
                 this.connection.send(new PacketLoginOutEncryptionBegin("", this.server.getKeyPair().getPublic().getEncoded(), this.challenge));
             } else {
-                this.startClientVerification(UUIDUtil.createOfflineProfile(this.requestedUsername));
+                // Spigot start
+                new Thread("User Authenticator #" + LoginListener.UNIQUE_THREAD_ID.incrementAndGet()) {
+
+                    @Override
+                    public void run() {
+                        try {
+                            new LoginHandler().fireEvents(UUIDUtil.createOfflineProfile(LoginListener.this.requestedUsername));
+                        } catch (Exception ex) {
+                            disconnect("Failed to verify username!");
+                            server.server.getLogger().log(java.util.logging.Level.WARNING, "Exception verifying " + LoginListener.this.requestedUsername, ex);
+                        }
+                    }
+                }.start();
+                // Spigot end
             }
 
         }
@@ -222,40 +235,7 @@ public class LoginListener implements PacketLoginInListener, TickablePacketListe
                             return;
                         }
 
-                        String playerName = gameprofile.getName();
-                        java.net.InetAddress address = ((java.net.InetSocketAddress) connection.getRemoteAddress()).getAddress();
-                        java.util.UUID uniqueId = gameprofile.getId();
-                        final org.bukkit.craftbukkit.CraftServer server = LoginListener.this.server.server;
-
-                        AsyncPlayerPreLoginEvent asyncEvent = new AsyncPlayerPreLoginEvent(playerName, address, uniqueId);
-                        server.getPluginManager().callEvent(asyncEvent);
-
-                        if (PlayerPreLoginEvent.getHandlerList().getRegisteredListeners().length != 0) {
-                            final PlayerPreLoginEvent event = new PlayerPreLoginEvent(playerName, address, uniqueId);
-                            if (asyncEvent.getResult() != PlayerPreLoginEvent.Result.ALLOWED) {
-                                event.disallow(asyncEvent.getResult(), asyncEvent.getKickMessage());
-                            }
-                            Waitable<PlayerPreLoginEvent.Result> waitable = new Waitable<PlayerPreLoginEvent.Result>() {
-                                @Override
-                                protected PlayerPreLoginEvent.Result evaluate() {
-                                    server.getPluginManager().callEvent(event);
-                                    return event.getResult();
-                                }};
-
-                            LoginListener.this.server.processQueue.add(waitable);
-                            if (waitable.get() != PlayerPreLoginEvent.Result.ALLOWED) {
-                                disconnect(event.getKickMessage());
-                                return;
-                            }
-                        } else {
-                            if (asyncEvent.getLoginResult() != AsyncPlayerPreLoginEvent.Result.ALLOWED) {
-                                disconnect(asyncEvent.getKickMessage());
-                                return;
-                            }
-                        }
-                        // CraftBukkit end
-                        LoginListener.LOGGER.info("UUID of player {} is {}", gameprofile.getName(), gameprofile.getId());
-                        LoginListener.this.startClientVerification(gameprofile);
+                        new LoginHandler().fireEvents(gameprofile);
                     } else if (LoginListener.this.server.isSingleplayer()) {
                         LoginListener.LOGGER.warn("Failed to verify username but will let them in anyway!");
                         LoginListener.this.startClientVerification(UUIDUtil.createOfflineProfile(s1));
@@ -292,6 +272,48 @@ public class LoginListener implements PacketLoginInListener, TickablePacketListe
         thread.start();
     }
 
+    // Spigot start
+    public class LoginHandler {
+
+        public void fireEvents(GameProfile gameprofile) throws Exception {
+                        String playerName = gameprofile.getName();
+                        java.net.InetAddress address = ((java.net.InetSocketAddress) connection.getRemoteAddress()).getAddress();
+                        java.util.UUID uniqueId = gameprofile.getId();
+                        final org.bukkit.craftbukkit.CraftServer server = LoginListener.this.server.server;
+
+                        AsyncPlayerPreLoginEvent asyncEvent = new AsyncPlayerPreLoginEvent(playerName, address, uniqueId);
+                        server.getPluginManager().callEvent(asyncEvent);
+
+                        if (PlayerPreLoginEvent.getHandlerList().getRegisteredListeners().length != 0) {
+                            final PlayerPreLoginEvent event = new PlayerPreLoginEvent(playerName, address, uniqueId);
+                            if (asyncEvent.getResult() != PlayerPreLoginEvent.Result.ALLOWED) {
+                                event.disallow(asyncEvent.getResult(), asyncEvent.getKickMessage());
+                            }
+                            Waitable<PlayerPreLoginEvent.Result> waitable = new Waitable<PlayerPreLoginEvent.Result>() {
+                                @Override
+                                protected PlayerPreLoginEvent.Result evaluate() {
+                                    server.getPluginManager().callEvent(event);
+                                    return event.getResult();
+                                }};
+
+                            LoginListener.this.server.processQueue.add(waitable);
+                            if (waitable.get() != PlayerPreLoginEvent.Result.ALLOWED) {
+                                disconnect(event.getKickMessage());
+                                return;
+                            }
+                        } else {
+                            if (asyncEvent.getLoginResult() != AsyncPlayerPreLoginEvent.Result.ALLOWED) {
+                                disconnect(asyncEvent.getKickMessage());
+                                return;
+                            }
+                        }
+                        // CraftBukkit end
+                        LoginListener.LOGGER.info("UUID of player {} is {}", gameprofile.getName(), gameprofile.getId());
+                        LoginListener.this.startClientVerification(gameprofile);
+        }
+    }
+    // Spigot end
+
     @Override
     public void handleCustomQueryPacket(ServerboundCustomQueryAnswerPacket serverboundcustomqueryanswerpacket) {
         this.disconnect(LoginListener.DISCONNECT_UNEXPECTED_QUERY);
-- 
2.43.0

