From 9bf10f1cdcdb5023028cf1e8c82c651466162d6f Mon Sep 17 00:00:00 2001
From: md_5 <git@md-5.net>
Date: Sat, 13 Dec 2014 02:59:14 +0100
Subject: [PATCH] BungeeCord Chat API


diff --git a/pom.xml b/pom.xml
index c6d4976b..83441eda 100644
--- a/pom.xml
+++ b/pom.xml
@@ -52,6 +52,13 @@
             <version>1.10.5</version>
             <scope>compile</scope>
         </dependency>
+        <dependency>
+            <groupId>net.md-5</groupId>
+            <artifactId>bungeecord-chat</artifactId>
+            <version>1.20-R0.2-SNAPSHOT</version>
+            <type>jar</type>
+            <scope>compile</scope>
+        </dependency>
         <dependency>
             <groupId>org.yaml</groupId>
             <artifactId>snakeyaml</artifactId>
diff --git a/src/main/java/org/bukkit/ChatColor.java b/src/main/java/org/bukkit/ChatColor.java
index 6149c77d..e3f185dc 100644
--- a/src/main/java/org/bukkit/ChatColor.java
+++ b/src/main/java/org/bukkit/ChatColor.java
@@ -15,91 +15,223 @@ public enum ChatColor {
     /**
      * Represents black
      */
-    BLACK('0', 0x00),
+    BLACK('0', 0x00) {
+        @NotNull
+        @Override
+        public net.md_5.bungee.api.ChatColor asBungee() {
+            return net.md_5.bungee.api.ChatColor.BLACK;
+        }
+    },
     /**
      * Represents dark blue
      */
-    DARK_BLUE('1', 0x1),
+    DARK_BLUE('1', 0x1) {
+        @NotNull
+        @Override
+        public net.md_5.bungee.api.ChatColor asBungee() {
+            return net.md_5.bungee.api.ChatColor.DARK_BLUE;
+        }
+    },
     /**
      * Represents dark green
      */
-    DARK_GREEN('2', 0x2),
+    DARK_GREEN('2', 0x2) {
+        @NotNull
+        @Override
+        public net.md_5.bungee.api.ChatColor asBungee() {
+            return net.md_5.bungee.api.ChatColor.DARK_GREEN;
+        }
+    },
     /**
      * Represents dark blue (aqua)
      */
-    DARK_AQUA('3', 0x3),
+    DARK_AQUA('3', 0x3) {
+        @NotNull
+        @Override
+        public net.md_5.bungee.api.ChatColor asBungee() {
+            return net.md_5.bungee.api.ChatColor.DARK_AQUA;
+        }
+    },
     /**
      * Represents dark red
      */
-    DARK_RED('4', 0x4),
+    DARK_RED('4', 0x4) {
+        @NotNull
+        @Override
+        public net.md_5.bungee.api.ChatColor asBungee() {
+            return net.md_5.bungee.api.ChatColor.DARK_RED;
+        }
+    },
     /**
      * Represents dark purple
      */
-    DARK_PURPLE('5', 0x5),
+    DARK_PURPLE('5', 0x5) {
+        @NotNull
+        @Override
+        public net.md_5.bungee.api.ChatColor asBungee() {
+            return net.md_5.bungee.api.ChatColor.DARK_PURPLE;
+        }
+    },
     /**
      * Represents gold
      */
-    GOLD('6', 0x6),
+    GOLD('6', 0x6) {
+        @NotNull
+        @Override
+        public net.md_5.bungee.api.ChatColor asBungee() {
+            return net.md_5.bungee.api.ChatColor.GOLD;
+        }
+    },
     /**
      * Represents gray
      */
-    GRAY('7', 0x7),
+    GRAY('7', 0x7) {
+        @NotNull
+        @Override
+        public net.md_5.bungee.api.ChatColor asBungee() {
+            return net.md_5.bungee.api.ChatColor.GRAY;
+        }
+    },
     /**
      * Represents dark gray
      */
-    DARK_GRAY('8', 0x8),
+    DARK_GRAY('8', 0x8) {
+        @NotNull
+        @Override
+        public net.md_5.bungee.api.ChatColor asBungee() {
+            return net.md_5.bungee.api.ChatColor.DARK_GRAY;
+        }
+    },
     /**
      * Represents blue
      */
-    BLUE('9', 0x9),
+    BLUE('9', 0x9) {
+        @NotNull
+        @Override
+        public net.md_5.bungee.api.ChatColor asBungee() {
+            return net.md_5.bungee.api.ChatColor.BLUE;
+        }
+    },
     /**
      * Represents green
      */
-    GREEN('a', 0xA),
+    GREEN('a', 0xA) {
+        @NotNull
+        @Override
+        public net.md_5.bungee.api.ChatColor asBungee() {
+            return net.md_5.bungee.api.ChatColor.GREEN;
+        }
+    },
     /**
      * Represents aqua
      */
-    AQUA('b', 0xB),
+    AQUA('b', 0xB) {
+        @NotNull
+        @Override
+        public net.md_5.bungee.api.ChatColor asBungee() {
+            return net.md_5.bungee.api.ChatColor.AQUA;
+        }
+    },
     /**
      * Represents red
      */
-    RED('c', 0xC),
+    RED('c', 0xC) {
+        @NotNull
+        @Override
+        public net.md_5.bungee.api.ChatColor asBungee() {
+            return net.md_5.bungee.api.ChatColor.RED;
+        }
+    },
     /**
      * Represents light purple
      */
-    LIGHT_PURPLE('d', 0xD),
+    LIGHT_PURPLE('d', 0xD) {
+        @NotNull
+        @Override
+        public net.md_5.bungee.api.ChatColor asBungee() {
+            return net.md_5.bungee.api.ChatColor.LIGHT_PURPLE;
+        }
+    },
     /**
      * Represents yellow
      */
-    YELLOW('e', 0xE),
+    YELLOW('e', 0xE) {
+        @NotNull
+        @Override
+        public net.md_5.bungee.api.ChatColor asBungee() {
+            return net.md_5.bungee.api.ChatColor.YELLOW;
+        }
+    },
     /**
      * Represents white
      */
-    WHITE('f', 0xF),
+    WHITE('f', 0xF) {
+        @NotNull
+        @Override
+        public net.md_5.bungee.api.ChatColor asBungee() {
+            return net.md_5.bungee.api.ChatColor.WHITE;
+        }
+    },
     /**
      * Represents magical characters that change around randomly
      */
-    MAGIC('k', 0x10, true),
+    MAGIC('k', 0x10, true) {
+        @NotNull
+        @Override
+        public net.md_5.bungee.api.ChatColor asBungee() {
+            return net.md_5.bungee.api.ChatColor.MAGIC;
+        }
+    },
     /**
      * Makes the text bold.
      */
-    BOLD('l', 0x11, true),
+    BOLD('l', 0x11, true) {
+        @NotNull
+        @Override
+        public net.md_5.bungee.api.ChatColor asBungee() {
+            return net.md_5.bungee.api.ChatColor.BOLD;
+        }
+    },
     /**
      * Makes a line appear through the text.
      */
-    STRIKETHROUGH('m', 0x12, true),
+    STRIKETHROUGH('m', 0x12, true) {
+        @NotNull
+        @Override
+        public net.md_5.bungee.api.ChatColor asBungee() {
+            return net.md_5.bungee.api.ChatColor.STRIKETHROUGH;
+        }
+    },
     /**
      * Makes the text appear underlined.
      */
-    UNDERLINE('n', 0x13, true),
+    UNDERLINE('n', 0x13, true) {
+        @NotNull
+        @Override
+        public net.md_5.bungee.api.ChatColor asBungee() {
+            return net.md_5.bungee.api.ChatColor.UNDERLINE;
+        }
+    },
     /**
      * Makes the text italic.
      */
-    ITALIC('o', 0x14, true),
+    ITALIC('o', 0x14, true) {
+        @NotNull
+        @Override
+        public net.md_5.bungee.api.ChatColor asBungee() {
+            return net.md_5.bungee.api.ChatColor.ITALIC;
+        }
+    },
     /**
      * Resets all previous chat colors or formats.
      */
-    RESET('r', 0x15);
+    RESET('r', 0x15) {
+        @NotNull
+        @Override
+        public net.md_5.bungee.api.ChatColor asBungee() {
+            return net.md_5.bungee.api.ChatColor.RESET;
+        }
+    };
 
     /**
      * The special character which prefixes all chat colour codes. Use this if
@@ -126,6 +258,11 @@ public enum ChatColor {
         this.toString = new String(new char[] {COLOR_CHAR, code});
     }
 
+    @NotNull
+    public net.md_5.bungee.api.ChatColor asBungee() {
+        return net.md_5.bungee.api.ChatColor.RESET;
+    };
+
     /**
      * Gets the char value associated with this color
      *
diff --git a/src/main/java/org/bukkit/Nameable.java b/src/main/java/org/bukkit/Nameable.java
index b79daa85..4a29081c 100644
--- a/src/main/java/org/bukkit/Nameable.java
+++ b/src/main/java/org/bukkit/Nameable.java
@@ -2,6 +2,11 @@ package org.bukkit;
 
 import org.jetbrains.annotations.Nullable;
 
+// Spigot start
+import org.jetbrains.annotations.NotNull;
+import net.md_5.bungee.api.chat.BaseComponent;
+// Spigot end
+
 /**
  * Represents a block, entity, or other object that may receive a custom name.
  */
@@ -31,4 +36,41 @@ public interface Nameable {
      * @param name the name to set
      */
     public void setCustomName(@Nullable String name);
+
+    // Spigot start
+    public interface Spigot {
+
+        /**
+         * Gets the custom name on a mob or block. If there is no name this method
+         * will return null.
+         * <p>
+         * This value has no effect on players, they will always use their real
+         * name.
+         *
+         * @return name of the mob/block or null
+         */
+        @Nullable
+        public default BaseComponent getCustomName() {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Sets a custom name on a mob or block. This name will be used in death
+         * messages and can be sent to the client as a nameplate over the mob.
+         * <p>
+         * Setting the name to null or an empty string will clear it.
+         * <p>
+         * This value has no effect on players, they will always use their real
+         * name.
+         *
+         * @param name the name to set
+         */
+        public default void setCustomName(@Nullable BaseComponent name) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+    }
+
+    @NotNull
+    public Spigot spigot();
+    // Spigot end
 }
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index 9f75c1bf..b0700e95 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -14,6 +14,7 @@ import java.util.Set;
 import java.util.UUID;
 import java.util.function.Consumer;
 import java.util.logging.Logger;
+import net.md_5.bungee.api.chat.BaseComponent; // Spigot
 import org.bukkit.Warning.WarningState;
 import org.bukkit.advancement.Advancement;
 import org.bukkit.block.data.BlockData;
@@ -1786,6 +1787,119 @@ public interface Server extends PluginMessageRecipient {
         public org.bukkit.configuration.file.YamlConfiguration getConfig() {
             throw new UnsupportedOperationException("Not supported yet.");
         }
+
+        /**
+         * Sends the component to the player
+         *
+         * @param component the component to send
+         */
+        public void broadcast(@NotNull BaseComponent component) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Sends an array of components as a single message to the player
+         *
+         * @param components the components to send
+         *
+         * @deprecated arrays of components are not supported. Use
+         * {@link #broadcast(BaseComponent)} instead
+         */
+        @Deprecated
+        public void broadcast(@NotNull BaseComponent... components) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Creates an empty inventory with the specified type and title. If the type
+         * is {@link InventoryType#CHEST}, the new inventory has a size of 27;
+         * otherwise the new inventory has the normal size for its type.<br>
+         * It should be noted that some inventory types do not support titles and
+         * may not render with said titles on the Minecraft client.
+         * <br>
+         * {@link InventoryType#WORKBENCH} will not process crafting recipes if
+         * created with this method. Use
+         * {@link Player#openWorkbench(Location, boolean)} instead.
+         * <br>
+         * {@link InventoryType#ENCHANTING} will not process {@link ItemStack}s
+         * for possible enchanting results. Use
+         * {@link Player#openEnchanting(Location, boolean)} instead.
+         *
+         * @param owner The holder of the inventory; can be null if there's no holder.
+         * @param type The type of inventory to create.
+         * @param title The title of the inventory, to be displayed when it is viewed.
+         * @return The new inventory.
+         * @throws IllegalArgumentException if the {@link InventoryType} cannot be
+         * viewed.
+         *
+         * @see InventoryType#isCreatable()
+         */
+        @NotNull
+        public Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull BaseComponent title) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Creates an empty inventory of type {@link InventoryType#CHEST} with the
+         * specified size and title.
+         *
+         * @param owner the holder of the inventory, or null to indicate no holder
+         * @param size a multiple of 9 as the size of inventory to create
+         * @param title the title of the inventory, displayed when inventory is
+         *     viewed
+         * @return a new inventory
+         * @throws IllegalArgumentException if the size is not a multiple of 9
+         */
+        @NotNull
+        public Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull BaseComponent title) throws IllegalArgumentException {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Creates an empty merchant.
+         *
+         * @param title the title of the corresponding merchant inventory, displayed
+         * when the merchant inventory is viewed
+         * @return a new merchant
+         */
+        @NotNull
+        public Merchant createMerchant(@Nullable BaseComponent title) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Creates a boss bar instance to display to players. The progress
+         * defaults to 1.0
+         *
+         * @param title the title of the boss bar
+         * @param color the color of the boss bar
+         * @param style the style of the boss bar
+         * @param flags an optional list of flags to set on the boss bar
+         * @return the created boss bar
+         */
+        @NotNull
+        public BossBar createBossBar(@Nullable BaseComponent title, @NotNull BarColor color, @NotNull BarStyle style, @NotNull BarFlag... flags) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Creates a boss bar instance to display to players. The progress defaults
+         * to 1.0.
+         * <br>
+         * This instance is added to the persistent storage of the server and will
+         * be editable by commands and restored after restart.
+         *
+         * @param key the key of the boss bar that is used to access the boss bar
+         * @param title the title of the boss bar
+         * @param color the color of the boss bar
+         * @param style the style of the boss bar
+         * @param flags an optional list of flags to set on the boss bar
+         * @return the created boss bar
+         */
+        @NotNull
+        public KeyedBossBar createBossBar(@NotNull NamespacedKey key, @Nullable BaseComponent title, @NotNull BarColor color, @NotNull BarStyle style, @NotNull BarFlag... flags) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
     }
 
     @NotNull
diff --git a/src/main/java/org/bukkit/Translatable.java b/src/main/java/org/bukkit/Translatable.java
index e3faa2c6..4f96e31e 100644
--- a/src/main/java/org/bukkit/Translatable.java
+++ b/src/main/java/org/bukkit/Translatable.java
@@ -6,7 +6,7 @@ import org.jetbrains.annotations.NotNull;
  * Represents an object with a text representation that can be translated by the
  * Minecraft client.
  */
-public interface Translatable {
+public interface Translatable extends net.md_5.bungee.api.chat.TranslationProvider { // Spigot - extend TranslationProvider
 
     /**
      * Get the translation key, suitable for use in a translation component.
@@ -15,4 +15,5 @@ public interface Translatable {
      */
     @NotNull
     String getTranslationKey();
+
 }
diff --git a/src/main/java/org/bukkit/advancement/AdvancementDisplay.java b/src/main/java/org/bukkit/advancement/AdvancementDisplay.java
index 0ff86a39..a3cff7a0 100644
--- a/src/main/java/org/bukkit/advancement/AdvancementDisplay.java
+++ b/src/main/java/org/bukkit/advancement/AdvancementDisplay.java
@@ -1,5 +1,6 @@
 package org.bukkit.advancement;
 
+import net.md_5.bungee.api.chat.BaseComponent; // Spigot
 import org.bukkit.inventory.ItemStack;
 import org.jetbrains.annotations.NotNull;
 
@@ -79,4 +80,33 @@ public interface AdvancementDisplay {
      */
     @NotNull
     AdvancementDisplayType getType();
+
+    // Spigot start
+    interface Spigot {
+
+        /**
+         * Gets the title of the advancement.
+         *
+         * @return the advancement title
+         */
+        @NotNull
+        public default BaseComponent getTitle() {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Gets the visible description of the advancement.
+         *
+         * @return the advancement description
+         */
+        @NotNull
+        public default BaseComponent getDescription() {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+    }
+
+    @NotNull
+    Spigot spigot();
+    // Spigot end
 }
diff --git a/src/main/java/org/bukkit/block/CommandBlock.java b/src/main/java/org/bukkit/block/CommandBlock.java
index 372c0bd5..e3a76feb 100644
--- a/src/main/java/org/bukkit/block/CommandBlock.java
+++ b/src/main/java/org/bukkit/block/CommandBlock.java
@@ -1,5 +1,6 @@
 package org.bukkit.block;
 
+import net.md_5.bungee.api.chat.BaseComponent; // Spigot
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -45,4 +46,35 @@ public interface CommandBlock extends TileState {
      * @param name New name for this CommandBlock.
      */
     public void setName(@Nullable String name);
+
+    // Spigot start
+    public interface Spigot {
+
+        /**
+         * Gets the name of this CommandBlock.  The name is used with commands
+         * that this CommandBlock executes.  This name will never be null, and
+         * by default is "@".
+         *
+         * @return Name of this CommandBlock.
+         */
+        @NotNull
+        public default BaseComponent getName() {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Sets the name of this CommandBlock.  The name is used with commands
+         * that this CommandBlock executes.  Setting the name to null is the
+         * same as setting it to "@".
+         *
+         * @param name New name for this CommandBlock.
+         */
+        public default void setName(@Nullable BaseComponent name) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+    }
+
+    @NotNull
+    public Spigot spigot();
+    // Spigot end
 }
diff --git a/src/main/java/org/bukkit/block/sign/SignSide.java b/src/main/java/org/bukkit/block/sign/SignSide.java
index 0f4ae7bd..ba09775a 100644
--- a/src/main/java/org/bukkit/block/sign/SignSide.java
+++ b/src/main/java/org/bukkit/block/sign/SignSide.java
@@ -1,5 +1,6 @@
 package org.bukkit.block.sign;
 
+import net.md_5.bungee.api.chat.BaseComponent; // Spigot
 import org.bukkit.material.Colorable;
 import org.jetbrains.annotations.NotNull;
 
@@ -53,4 +54,50 @@ public interface SignSide extends Colorable {
      * @param glowing if this side of the sign has glowing text
      */
     public void setGlowingText(boolean glowing);
+
+    // Spigot start
+    public interface Spigot {
+
+        /**
+         * Gets all the lines of text currently on this side of the sign.
+         *
+         * @return Array of components containing each line of text
+         */
+        @NotNull
+        public default BaseComponent[] getLines() {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Gets the line of text at the specified index on this side of the sign.
+         * <p>
+         * For example, getLine(0) will return the first line of text.
+         *
+         * @param index Line number to get the text from, starting at 0
+         * @return Text on the given line
+         * @throws IndexOutOfBoundsException Thrown when the line does not exist
+         */
+        @NotNull
+        public default BaseComponent getLine(int index) throws IndexOutOfBoundsException {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Sets the line of text at the specified index.
+         * <p>
+         * For example, setLine(0, new TextComponent("Line One")) will set the
+         * first line of text to "Line One".
+         *
+         * @param index Line number to set the text at, starting from 0
+         * @param line New text to set at the specified index
+         * @throws IndexOutOfBoundsException If the index is out of the range 0..3
+         */
+        public default void setLine(int index, @NotNull BaseComponent line) throws IndexOutOfBoundsException {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+    }
+
+    @NotNull
+    public Spigot spigot();
+    // Spigot end
 }
diff --git a/src/main/java/org/bukkit/boss/BossBar.java b/src/main/java/org/bukkit/boss/BossBar.java
index 70274f2e..b6425496 100644
--- a/src/main/java/org/bukkit/boss/BossBar.java
+++ b/src/main/java/org/bukkit/boss/BossBar.java
@@ -1,6 +1,7 @@
 package org.bukkit.boss;
 
 import java.util.List;
+import net.md_5.bungee.api.chat.BaseComponent; // Spigot
 import org.bukkit.entity.Player;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
@@ -146,4 +147,31 @@ public interface BossBar {
      */
     @Deprecated
     void hide();
+
+    // Spigot start
+    interface Spigot {
+
+        /**
+         * Returns the title of this boss bar
+         *
+         * @return the title of the bar
+         */
+        @NotNull
+        public default BaseComponent getTitle() {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Sets the title of this boss bar
+         *
+         * @param title the title of the bar
+         */
+        public default void setTitle(@Nullable BaseComponent title) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+    }
+
+    @NotNull
+    Spigot spigot();
+    // Spigot end
 }
diff --git a/src/main/java/org/bukkit/command/Command.java b/src/main/java/org/bukkit/command/Command.java
index 80209bb8..c7b46dd7 100644
--- a/src/main/java/org/bukkit/command/Command.java
+++ b/src/main/java/org/bukkit/command/Command.java
@@ -19,6 +19,11 @@ import org.bukkit.util.StringUtil;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+// Spigot start
+import net.md_5.bungee.api.chat.BaseComponent;
+import net.md_5.bungee.api.chat.TextComponent;
+// Spigot end
+
 /**
  * Represents a Command, which executes various tasks upon user input
  */
@@ -32,9 +37,11 @@ public abstract class Command {
     protected String description;
     protected String usageMessage;
     private String permission;
-    private String permissionMessage;
+    // private String permissionMessage; // Spigot - remove
     public org.spigotmc.CustomTimingsHandler timings; // Spigot
 
+    private Spigot spigot = new Spigot(); // Spigot
+
     protected Command(@NotNull String name) {
         this(name, "", "/" + name, new ArrayList<String>());
     }
@@ -184,12 +191,27 @@ public abstract class Command {
             return true;
         }
 
+        BaseComponent permissionMessage = spigot().permissionMessage; // Spigot
         if (permissionMessage == null) {
             target.sendMessage(ChatColor.RED + "I'm sorry, but you do not have permission to perform this command. Please contact the server administrators if you believe that this is a mistake.");
-        } else if (permissionMessage.length() != 0) {
-            for (String line : permissionMessage.replace("<permission>", permission).split("\n")) {
-                target.sendMessage(line);
+            // Spigot start
+        } else {
+            BaseComponent filteredPermissionMessage = permissionMessage.duplicate();
+
+            if (filteredPermissionMessage instanceof TextComponent) {
+                TextComponent textComponent = (TextComponent) filteredPermissionMessage;
+                textComponent.setText(textComponent.getText().replace("<permission>", permission));
+            }
+
+            for (BaseComponent child : filteredPermissionMessage.getExtra()) {
+                if (child instanceof TextComponent) {
+                    TextComponent textComponent = (TextComponent) child;
+                    textComponent.setText(textComponent.getText().replace("<permission>", permission));
+                }
             }
+
+            target.spigot().sendMessage(filteredPermissionMessage);
+            // Spigot end
         }
 
         return false;
@@ -320,7 +342,10 @@ public abstract class Command {
      */
     @Nullable
     public String getPermissionMessage() {
-        return permissionMessage;
+        // Spigot start
+        BaseComponent permissionMessage = spigot().permissionMessage;
+        return (permissionMessage != null) ? BaseComponent.toLegacyText(permissionMessage) : null;
+        // Spigot end
     }
 
     /**
@@ -384,7 +409,7 @@ public abstract class Command {
      */
     @NotNull
     public Command setPermissionMessage(@Nullable String permissionMessage) {
-        this.permissionMessage = permissionMessage;
+        this.spigot().setPermissionMessage(TextComponent.fromLegacy(permissionMessage)); // Spigot
         return this;
     }
 
@@ -400,6 +425,45 @@ public abstract class Command {
         return this;
     }
 
+    // Spigot start
+    public final class Spigot {
+
+        private BaseComponent permissionMessage;
+
+        private Spigot() {
+        }
+
+        /**
+         * Sets the message sent when a permission check fails
+         *
+         * @param permissionMessage new permission message, null to indicate
+         *     default message, or an empty component array to indicate no message
+         * @return this command object, for chaining
+         */
+        public Command setPermissionMessage(@Nullable BaseComponent permissionMessage) {
+            this.permissionMessage = (permissionMessage != null) ? permissionMessage.duplicate() : null;
+            return Command.this;
+        }
+
+       /**
+        * Returns a message to be displayed on a failed permission check for this
+        * command (using {@link BaseComponent BaseComponents}.
+        *
+        * @return Permission check failed message
+        */
+        @Nullable
+        public BaseComponent getPermissionMessage() {
+            return (permissionMessage != null) ? permissionMessage.duplicate() : null;
+        }
+
+    }
+
+    @NotNull
+    public final Spigot spigot() {
+        return spigot;
+    }
+    // Spigot end
+
     public static void broadcastCommandMessage(@NotNull CommandSender source, @NotNull String message) {
         broadcastCommandMessage(source, message, true);
     }
diff --git a/src/main/java/org/bukkit/command/CommandSender.java b/src/main/java/org/bukkit/command/CommandSender.java
index 4b6b9540..53ec1148 100644
--- a/src/main/java/org/bukkit/command/CommandSender.java
+++ b/src/main/java/org/bukkit/command/CommandSender.java
@@ -1,6 +1,7 @@
 package org.bukkit.command;
 
 import java.util.UUID;
+import net.md_5.bungee.api.chat.BaseComponent; // Spigot
 import org.bukkit.Server;
 import org.bukkit.permissions.Permissible;
 import org.jetbrains.annotations.NotNull;
@@ -57,6 +58,51 @@ public interface CommandSender extends Permissible {
     // Spigot start
     public class Spigot {
 
+        /**
+         * Sends this sender a chat component.
+         *
+         * @param component the components to send
+         */
+        public void sendMessage(@NotNull BaseComponent component) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Sends an array of components as a single message to the sender.
+         *
+         * @param components the components to send
+         *
+         * @deprecated arrays of components are not supported. Use
+         * {@link #sendMessage(BaseComponent)} instead
+         */
+        @Deprecated
+        public void sendMessage(@NotNull BaseComponent... components) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Sends this sender a chat component.
+         *
+         * @param component the components to send
+         * @param sender the sender of the message
+         */
+        public void sendMessage(@Nullable UUID sender, @NotNull BaseComponent component) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Sends an array of components as a single message to the sender.
+         *
+         * @param components the components to send
+         * @param sender the sender of the message
+         *
+         * @deprecated arrays of components are not supported. Use
+         * {@link #sendMessage(UUID, BaseComponent)} instead
+         */
+        @Deprecated
+        public void sendMessage(@Nullable UUID sender, @NotNull BaseComponent... components) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
     }
 
     @NotNull
diff --git a/src/main/java/org/bukkit/enchantments/Enchantment.java b/src/main/java/org/bukkit/enchantments/Enchantment.java
index c349cd16..297b2e27 100644
--- a/src/main/java/org/bukkit/enchantments/Enchantment.java
+++ b/src/main/java/org/bukkit/enchantments/Enchantment.java
@@ -10,6 +10,11 @@ import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+// Spigot start
+import net.md_5.bungee.api.chat.BaseComponent;
+import net.md_5.bungee.api.chat.TranslatableComponent;
+// Spigot end
+
 /**
  * The various type of enchantments that may be added to armour or weapons
  */
@@ -296,6 +301,42 @@ public abstract class Enchantment implements Keyed {
      */
     public abstract boolean canEnchantItem(@NotNull ItemStack item);
 
+    // Spigot start
+    public interface Spigot {
+
+        /**
+         * Get this Enchantment's name as a translatable component.
+         *
+         * @return the translatable component that represents this enchantment's name
+         */
+        @NotNull
+        public default TranslatableComponent getDisplayName() {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Get the full display name of this Enchantment with the given level.
+         * <p>
+         * The display name will be colored as though it was displayed on an item (i.e. curses being red
+         * and regular enchantments being gray). Additionally, if {@code level} is less than
+         * {@link Enchantment#getStartLevel()} or greater than {@link Enchantment#getMaxLevel()}, the level
+         * may not show as expected unless a resource pack is installed on the client which supports values
+         * beyond vanilla's built-in levels. These are implementation details and cannot be guaranteed from
+         * version to version.
+         *
+         * @param level the level
+         * @return the display name with the level
+         */
+        @NotNull
+        public default BaseComponent getDisplayName(int level) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+    }
+
+    @NotNull
+    public abstract Spigot spigot();
+    // Spigot end
+
     /**
      * Gets the Enchantment at the specified key
      *
diff --git a/src/main/java/org/bukkit/entity/Entity.java b/src/main/java/org/bukkit/entity/Entity.java
index 8532b848..8542109e 100644
--- a/src/main/java/org/bukkit/entity/Entity.java
+++ b/src/main/java/org/bukkit/entity/Entity.java
@@ -760,7 +760,7 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
     Entity copy(@NotNull Location to);
 
     // Spigot start
-    public class Spigot extends CommandSender.Spigot {
+    public class Spigot extends CommandSender.Spigot implements Nameable.Spigot {
 
     }
 
diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
index 7e2589c2..b48533e0 100644
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -49,6 +49,11 @@ import org.jetbrains.annotations.ApiStatus;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+// Spigot start
+import net.md_5.bungee.api.ChatMessageType;
+import net.md_5.bungee.api.chat.BaseComponent;
+// Spigot end
+
 /**
  * Represents a player, connected or not
  */
@@ -2061,6 +2066,358 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
         public java.util.Set<Player> getHiddenPlayers() {
             throw new UnsupportedOperationException("Not supported yet.");
         }
+
+        /**
+         * Gets the name that is shown on the player list.
+         *
+         * @return the player list name
+         */
+        @NotNull
+        public BaseComponent getPlayerListName() {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Sets the name that is shown on the in-game player list.
+         * <p>
+         * If the value is null, the name will be identical to {@link #getName()}.
+         *
+         * @param name new player list name
+         */
+        public void setPlayerListName(@Nullable BaseComponent name) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Gets the currently displayed player list header for this player.
+         *
+         * @return player list header or null
+         */
+        @Nullable
+        public BaseComponent getPlayerListHeader() {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Gets the currently displayed player list footer for this player.
+         *
+         * @return player list header or null
+         */
+        @Nullable
+        public BaseComponent getPlayerListFooter() {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Sets the currently displayed player list header for this player.
+         *
+         * @param header player list header, null for empty
+         */
+        public void setPlayerListHeader(@Nullable BaseComponent header) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Sets the currently displayed player list footer for this player.
+         *
+         * @param footer player list footer, null for empty
+         */
+        public void setPlayerListFooter(@Nullable BaseComponent footer) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Sets the currently displayed player list header and footer for this
+         * player.
+         *
+         * @param header player list header, null for empty
+         * @param footer player list footer, null for empty
+         */
+        public void setPlayerListHeaderFooter(@Nullable BaseComponent header, @Nullable BaseComponent footer) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Kicks player with custom kick message.
+         *
+         * @param message kick message
+         */
+        public void kickPlayer(@Nullable BaseComponent message) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Send a sign change. This fakes a sign change packet for a user at
+         * a certain location. This will not actually change the world in any way.
+         * This method will use a sign at the location's block or a faked sign
+         * sent via
+         * {@link #sendBlockChange(org.bukkit.Location, org.bukkit.Material, byte)}.
+         * <p>
+         * If the client does not have a sign at the given location it will
+         * display an error message to the user.
+         *
+         * @param loc the location of the sign
+         * @param lines the new text on the sign or null to clear it
+         * @throws IllegalArgumentException if location is null
+         * @throws IllegalArgumentException if lines is non-null and has a length less than 4
+         */
+        public void sendSignChange(@NotNull Location loc, @Nullable BaseComponent[] lines) throws IllegalArgumentException {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Send a sign change. This fakes a sign change packet for a user at
+         * a certain location. This will not actually change the world in any way.
+         * This method will use a sign at the location's block or a faked sign
+         * sent via
+         * {@link #sendBlockChange(org.bukkit.Location, org.bukkit.Material, byte)}.
+         * <p>
+         * If the client does not have a sign at the given location it will
+         * display an error message to the user.
+         *
+         * @param loc the location of the sign
+         * @param lines the new text on the sign or null to clear it
+         * @param dyeColor the color of the sign
+         * @throws IllegalArgumentException if location is null
+         * @throws IllegalArgumentException if dyeColor is null
+         * @throws IllegalArgumentException if lines is non-null and has a length less than 4
+         */
+        public void sendSignChange(@NotNull Location loc, @Nullable BaseComponent[] lines, @NotNull DyeColor dyeColor) throws IllegalArgumentException {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Send a sign change. This fakes a sign change packet for a user at
+         * a certain location. This will not actually change the world in any way.
+         * This method will use a sign at the location's block or a faked sign
+         * sent via
+         * {@link #sendBlockChange(org.bukkit.Location, org.bukkit.Material, byte)}.
+         * <p>
+         * If the client does not have a sign at the given location it will
+         * display an error message to the user.
+         *
+         * @param loc the location of the sign
+         * @param lines the new text on the sign or null to clear it
+         * @param dyeColor the color of the sign
+         * @param hasGlowingText if the sign's text should be glowing
+         * @throws IllegalArgumentException if location is null
+         * @throws IllegalArgumentException if dyeColor is null
+         * @throws IllegalArgumentException if lines is non-null and has a length less than 4
+         */
+        public void sendSignChange(@NotNull Location loc, @Nullable BaseComponent[] lines, @NotNull DyeColor dyeColor, boolean hasGlowingText) throws IllegalArgumentException {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Request that the player's client download and switch resource packs.
+         * <p>
+         * The player's client will download the new resource pack asynchronously
+         * in the background, and will automatically switch to it once the
+         * download is complete. If the client has downloaded and cached a
+         * resource pack with the same hash in the past it will not download but
+         * directly apply the cached pack. If the hash is null and the client has
+         * downloaded and cached the same resource pack in the past, it will
+         * perform a file size check against the response content to determine if
+         * the resource pack has changed and needs to be downloaded again. When
+         * this request is sent for the very first time from a given server, the
+         * client will first display a confirmation GUI to the player before
+         * proceeding with the download.
+         * <p>
+         * Notes:
+         * <ul>
+         * <li>Players can disable server resources on their client, in which
+         *     case this method will have no affect on them. Use the
+         *     {@link PlayerResourcePackStatusEvent} to figure out whether or not
+         *     the player loaded the pack!
+         * <li>There is no concept of resetting resource packs back to default
+         *     within Minecraft, so players will have to relog to do so or you
+         *     have to send an empty pack.
+         * <li>The request is sent with empty string as the hash when the hash is
+         *     not provided. This might result in newer versions not loading the
+         *     pack correctly.
+         * </ul>
+         *
+         * @param url The URL from which the client will download the resource
+         *     pack. The string must contain only US-ASCII characters and should
+         *     be encoded as per RFC 1738.
+         * @param hash The sha1 hash sum of the resource pack file which is used
+         *     to apply a cached version of the pack directly without downloading
+         *     if it is available. Hast to be 20 bytes long!
+         * @param prompt The optional custom prompt message to be shown to client.
+         * @throws IllegalArgumentException Thrown if the URL is null.
+         * @throws IllegalArgumentException Thrown if the URL is too long. The
+         *     length restriction is an implementation specific arbitrary value.
+         * @throws IllegalArgumentException Thrown if the hash is not 20 bytes
+         *     long.
+         */
+        public void setResourcePack(@NotNull String url, @Nullable byte[] hash, @Nullable BaseComponent prompt) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Request that the player's client download and switch resource packs.
+         * <p>
+         * The player's client will download the new resource pack asynchronously
+         * in the background, and will automatically switch to it once the
+         * download is complete. If the client has downloaded and cached a
+         * resource pack with the same hash in the past it will not download but
+         * directly apply the cached pack. If the hash is null and the client has
+         * downloaded and cached the same resource pack in the past, it will
+         * perform a file size check against the response content to determine if
+         * the resource pack has changed and needs to be downloaded again. When
+         * this request is sent for the very first time from a given server, the
+         * client will first display a confirmation GUI to the player before
+         * proceeding with the download.
+         * <p>
+         * Notes:
+         * <ul>
+         * <li>Players can disable server resources on their client, in which
+         *     case this method will have no affect on them. Use the
+         *     {@link PlayerResourcePackStatusEvent} to figure out whether or not
+         *     the player loaded the pack!
+         * <li>There is no concept of resetting resource packs back to default
+         *     within Minecraft, so players will have to relog to do so or you
+         *     have to send an empty pack.
+         * <li>The request is sent with empty string as the hash when the hash is
+         *     not provided. This might result in newer versions not loading the
+         *     pack correctly.
+         * </ul>
+         *
+         * @param url The URL from which the client will download the resource
+         *     pack. The string must contain only US-ASCII characters and should
+         *     be encoded as per RFC 1738.
+         * @param hash The sha1 hash sum of the resource pack file which is used
+         *     to apply a cached version of the pack directly without downloading
+         *     if it is available. Hast to be 20 bytes long!
+         * @param prompt The optional custom prompt message to be shown to client.
+         * @param force If true, the client will be disconnected from the server
+         *     when it declines to use the resource pack.
+         * @throws IllegalArgumentException Thrown if the URL is null.
+         * @throws IllegalArgumentException Thrown if the URL is too long. The
+         *     length restriction is an implementation specific arbitrary value.
+         * @throws IllegalArgumentException Thrown if the hash is not 20 bytes
+         *     long.
+         */
+        public void setResourcePack(@NotNull String url, @Nullable byte[] hash, @Nullable BaseComponent prompt, boolean force) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Request that the player's client download and switch resource packs.
+         * <p>
+         * The player's client will download the new resource pack asynchronously
+         * in the background, and will automatically switch to it once the
+         * download is complete. If the client has downloaded and cached a
+         * resource pack with the same hash in the past it will not download but
+         * directly apply the cached pack. If the hash is null and the client has
+         * downloaded and cached the same resource pack in the past, it will
+         * perform a file size check against the response content to determine if
+         * the resource pack has changed and needs to be downloaded again. When
+         * this request is sent for the very first time from a given server, the
+         * client will first display a confirmation GUI to the player before
+         * proceeding with the download.
+         * <p>
+         * Notes:
+         * <ul>
+         * <li>Players can disable server resources on their client, in which
+         *     case this method will have no affect on them. Use the
+         *     {@link PlayerResourcePackStatusEvent} to figure out whether or not
+         *     the player loaded the pack!
+         * <li>There is no concept of resetting resource packs back to default
+         *     within Minecraft, so players will have to relog to do so or you
+         *     have to send an empty pack.
+         * <li>The request is sent with empty string as the hash when the hash is
+         *     not provided. This might result in newer versions not loading the
+         *     pack correctly.
+         * </ul>
+         *
+         * @param id Unique resource pack ID.
+         * @param url The URL from which the client will download the resource
+         *     pack. The string must contain only US-ASCII characters and should
+         *     be encoded as per RFC 1738.
+         * @param hash The sha1 hash sum of the resource pack file which is used
+         *     to apply a cached version of the pack directly without downloading
+         *     if it is available. Hast to be 20 bytes long!
+         * @param prompt The optional custom prompt message to be shown to client.
+         * @param force If true, the client will be disconnected from the server
+         *     when it declines to use the resource pack.
+         * @throws IllegalArgumentException Thrown if the URL is null.
+         * @throws IllegalArgumentException Thrown if the URL is too long. The
+         *     length restriction is an implementation specific arbitrary value.
+         * @throws IllegalArgumentException Thrown if the hash is not 20 bytes
+         *     long.
+         */
+        public void setResourcePack(@NotNull UUID id, @NotNull String url, @Nullable byte[] hash, @Nullable BaseComponent prompt, boolean force) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Sends the component to the specified screen position of this player
+         *
+         * @param position the screen position
+         * @param component the components to send
+         */
+        public void sendMessage(@NotNull ChatMessageType position, @NotNull BaseComponent component) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Sends an array of components as a single message to the specified screen position of this player
+         *
+         * @param position the screen position
+         * @param components the components to send
+         *
+         * @deprecated arrays of components are not supported. Use
+         * {@link #sendMessage(ChatMessageType, BaseComponent)} instead
+         */
+        @Deprecated
+        public void sendMessage(@NotNull ChatMessageType position, @NotNull BaseComponent... components) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Sends the component to the specified screen position of this player
+         *
+         * @param position the screen position
+         * @param sender the sender of the message
+         * @param component the components to send
+         */
+        public void sendMessage(@NotNull ChatMessageType position, @Nullable java.util.UUID sender, @NotNull BaseComponent component) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Sends an array of components as a single message to the specified screen position of this player
+         *
+         * @param position the screen position
+         * @param sender the sender of the message
+         * @param components the components to send
+         *
+         * @deprecated arrays of components are not supported. Use
+         * {@link #sendMessage(ChatMessageType, java.util.UUID, BaseComponent)} instead
+         */
+        @Deprecated
+        public void sendMessage(@NotNull ChatMessageType position, @Nullable java.util.UUID sender, @NotNull BaseComponent... components) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Sends a title and a subtitle message to the player. If either of these
+         * values are null, they will not be sent and the display will remain
+         * unchanged. If the strings contain a new line, only the first line will
+         * be sent. All timings values may take a value of -1 to indicate that they
+         * will use the last value sent (or the defaults if no title has been
+         * displayed).
+         *
+         * @param title Title component
+         * @param subtitle Subtitle component
+         * @param fadeIn time in ticks for titles to fade in. Defaults to 10.
+         * @param stay time in ticks for titles to stay. Defaults to 70.
+         * @param fadeOut time in ticks for titles to fade out. Defaults to 20.
+         */
+        public void sendTitle(@Nullable BaseComponent title, @Nullable BaseComponent subtitle, int fadeIn, int stay, int fadeOut) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
     }
 
     @NotNull
diff --git a/src/main/java/org/bukkit/entity/TextDisplay.java b/src/main/java/org/bukkit/entity/TextDisplay.java
index d6d7ada3..8b61b2d2 100644
--- a/src/main/java/org/bukkit/entity/TextDisplay.java
+++ b/src/main/java/org/bukkit/entity/TextDisplay.java
@@ -1,5 +1,6 @@
 package org.bukkit.entity;
 
+import net.md_5.bungee.api.chat.BaseComponent; // Spigot
 import org.bukkit.Color;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
@@ -146,4 +147,32 @@ public interface TextDisplay extends Display {
          */
         RIGHT;
     }
+
+    // Spigot start
+    class Spigot extends Entity.Spigot {
+
+        /**
+         * Gets the displayed text.
+         *
+         * @return the displayed text.
+         */
+        @Nullable
+        public BaseComponent getText() {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Sets the displayed text.
+         *
+         * @param text the new text
+         */
+        public void setText(@Nullable BaseComponent text) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+    }
+
+    @NotNull
+    @Override
+    TextDisplay.Spigot spigot();
+    // Spigot end
 }
diff --git a/src/main/java/org/bukkit/inventory/InventoryView.java b/src/main/java/org/bukkit/inventory/InventoryView.java
index e1299649..27fc0734 100644
--- a/src/main/java/org/bukkit/inventory/InventoryView.java
+++ b/src/main/java/org/bukkit/inventory/InventoryView.java
@@ -1,6 +1,7 @@
 package org.bukkit.inventory;
 
 import com.google.common.base.Preconditions;
+import net.md_5.bungee.api.chat.BaseComponent; // Spigot
 import org.bukkit.entity.HumanEntity;
 import org.bukkit.event.inventory.InventoryType;
 import org.jetbrains.annotations.NotNull;
@@ -475,4 +476,47 @@ public abstract class InventoryView {
      * @param title The new title.
      */
     public abstract void setTitle(@NotNull String title);
+
+    // Spigot start
+    public interface Spigot {
+
+        /**
+         * Get the title of this inventory window.
+         *
+         * @return The title.
+         */
+        @NotNull
+        public default BaseComponent getTitle() {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Get the original title of this inventory window, before any changes were
+         * made using {@link #setTitle(String)}.
+         *
+         * @return the original title
+         */
+        @NotNull
+        public default BaseComponent getOriginalTitle() {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Sets the title of this inventory window to the specified title if the
+         * inventory window supports it.
+         * <p>
+         * Note if the inventory does not support titles that can be changed (ie, it
+         * is not creatable or viewed by a player), then this method will throw an
+         * exception.
+         *
+         * @param title The new title.
+         */
+        public default void setTitle(@NotNull BaseComponent title) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+    }
+
+    @NotNull
+    public abstract Spigot spigot();
+    // Spigot end
 }
diff --git a/src/main/java/org/bukkit/inventory/meta/BookMeta.java b/src/main/java/org/bukkit/inventory/meta/BookMeta.java
index f740bebe..80f7a0fb 100644
--- a/src/main/java/org/bukkit/inventory/meta/BookMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/BookMeta.java
@@ -1,6 +1,7 @@
 package org.bukkit.inventory.meta;
 
 import java.util.List;
+import net.md_5.bungee.api.chat.BaseComponent; // Spigot
 import org.bukkit.Material;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
@@ -187,8 +188,72 @@ public interface BookMeta extends ItemMeta {
     BookMeta clone();
 
     // Spigot start
-    public class Spigot {
+    public class Spigot extends ItemMeta.Spigot {
 
+        /**
+         * Gets the specified page in the book. The given page must exist.
+         *
+         * @param page the page number to get
+         * @return the page from the book
+         */
+        @NotNull
+        public BaseComponent[] getPage(int page) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Sets the specified page in the book. Pages of the book must be
+         * contiguous.
+         * <p>
+         * The data can be up to 256 characters in length, additional characters
+         * are truncated.
+         *
+         * @param page the page number to set
+         * @param data the data to set for that page
+         */
+        public void setPage(int page, @Nullable BaseComponent... data) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Gets all the pages in the book.
+         *
+         * @return list of all the pages in the book
+         */
+        @NotNull
+        public List<BaseComponent[]> getPages() {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Clears the existing book pages, and sets the book to use the provided
+         * pages. Maximum 50 pages with 256 characters per page.
+         *
+         * @param pages A list of pages to set the book to use
+         */
+        public void setPages(@NotNull List<BaseComponent[]> pages) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Clears the existing book pages, and sets the book to use the provided
+         * pages. Maximum 50 pages with 256 characters per page.
+         *
+         * @param pages A list of component arrays, each being a page
+         */
+        public void setPages(@NotNull BaseComponent[]... pages) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Adds new pages to the end of the book. Up to a maximum of 50 pages
+         * with 256 characters per page.
+         *
+         * @param pages A list of component arrays, each being a page
+         */
+        public void addPage(@NotNull BaseComponent[]... pages) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
     }
 
     @NotNull
diff --git a/src/main/java/org/bukkit/inventory/meta/ItemMeta.java b/src/main/java/org/bukkit/inventory/meta/ItemMeta.java
index 8ca9605f..0463c5b9 100644
--- a/src/main/java/org/bukkit/inventory/meta/ItemMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/ItemMeta.java
@@ -5,6 +5,7 @@ import java.util.Collection;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import net.md_5.bungee.api.chat.BaseComponent; // Spigot
 import org.bukkit.attribute.Attribute;
 import org.bukkit.attribute.AttributeModifier;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
@@ -401,4 +402,57 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste
     @SuppressWarnings("javadoc")
     @NotNull
     ItemMeta clone();
+
+    // Spigot start
+    public class Spigot {
+
+        /**
+         * Gets the display name that is set as a component.
+         * <p>
+         * Plugins should check that hasDisplayName() returns <code>true</code>
+         * before calling this method.
+         *
+         * @return the display name that is set, or null if none
+         */
+        @Nullable
+        public BaseComponent getDisplayName() {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Sets the display name component.
+         *
+         * @param displayName the display name to set
+         */
+        public void setDisplayName(@Nullable BaseComponent displayName) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Gets the lore that is set as a list of components where each entry
+         * in the list is a line of lore.
+         * <p>
+         * Plugins should check if hasLore() returns <code>true</code> before
+         * calling this method.
+         *
+         * @return a list of lore that is set
+         */
+        @Nullable
+        public List<BaseComponent> getLore() {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Sets the lore for this item. Removes lore when given null.
+         *
+         * @param lore the lore that will be set
+         */
+        public void setLore(@Nullable List<BaseComponent> lore) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+    }
+
+    @NotNull
+    Spigot spigot();
+    // Spigot end
 }
diff --git a/src/main/java/org/bukkit/scoreboard/Objective.java b/src/main/java/org/bukkit/scoreboard/Objective.java
index 78fd35e6..c96d5f54 100644
--- a/src/main/java/org/bukkit/scoreboard/Objective.java
+++ b/src/main/java/org/bukkit/scoreboard/Objective.java
@@ -1,5 +1,6 @@
 package org.bukkit.scoreboard;
 
+import net.md_5.bungee.api.chat.BaseComponent; // Spigot
 import org.bukkit.OfflinePlayer;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
@@ -140,4 +141,33 @@ public interface Objective {
      */
     @NotNull
     Score getScore(@NotNull String entry);
+
+    // Spigot start
+    interface Spigot {
+
+        /**
+         * Gets the name displayed to players for this objective
+         *
+         * @return this objective's display name
+         * @throws IllegalStateException if this objective has been unregistered
+         */
+        @NotNull
+        default BaseComponent getDisplayName() {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Sets the name displayed to players for this objective.
+         *
+         * @param displayName Display name to set
+         * @throws IllegalStateException if this objective has been unregistered
+         */
+        default void setDisplayName(@NotNull BaseComponent displayName) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+    }
+
+    @NotNull
+    Spigot spigot();
+    // Spigot end
 }
diff --git a/src/main/java/org/bukkit/scoreboard/Scoreboard.java b/src/main/java/org/bukkit/scoreboard/Scoreboard.java
index 083bb2c9..d20db7e8 100644
--- a/src/main/java/org/bukkit/scoreboard/Scoreboard.java
+++ b/src/main/java/org/bukkit/scoreboard/Scoreboard.java
@@ -1,6 +1,7 @@
 package org.bukkit.scoreboard;
 
 import java.util.Set;
+import net.md_5.bungee.api.chat.BaseComponent; // Spigot
 import org.bukkit.OfflinePlayer;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
@@ -249,4 +250,43 @@ public interface Scoreboard {
      * @param slot the slot to remove objectives
      */
     void clearSlot(@NotNull DisplaySlot slot);
+
+    // Spigot start
+    interface Spigot {
+
+        /**
+         * Registers an Objective on this Scoreboard
+         *
+         * @param name Name of the Objective
+         * @param criteria Criteria for the Objective
+         * @param displayName Name displayed to players for the Objective.
+         * @return The registered Objective
+         * @throws IllegalArgumentException if an objective by that name already
+         *     exists
+         */
+        @NotNull
+        default Objective registerNewObjective(@NotNull String name, @NotNull Criteria criteria, @NotNull BaseComponent displayName) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Registers an Objective on this Scoreboard
+         *
+         * @param name Name of the Objective
+         * @param criteria Criteria for the Objective
+         * @param displayName Name displayed to players for the Objective.
+         * @param renderType Manner of rendering the Objective
+         * @return The registered Objective
+         * @throws IllegalArgumentException if an objective by that name already
+         *     exists
+         */
+        @NotNull
+        default Objective registerNewObjective(@NotNull String name, @NotNull Criteria criteria, @NotNull BaseComponent displayName, @NotNull RenderType renderType) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+    }
+
+    @NotNull
+    Spigot spigot();
+    // Spigot end
 }
diff --git a/src/main/java/org/bukkit/scoreboard/Team.java b/src/main/java/org/bukkit/scoreboard/Team.java
index 7b9a7890..3b4c25c5 100644
--- a/src/main/java/org/bukkit/scoreboard/Team.java
+++ b/src/main/java/org/bukkit/scoreboard/Team.java
@@ -1,6 +1,7 @@
 package org.bukkit.scoreboard;
 
 import java.util.Set;
+import net.md_5.bungee.api.chat.BaseComponent; // Spigot
 import org.bukkit.ChatColor;
 import org.bukkit.OfflinePlayer;
 import org.bukkit.potion.PotionEffectType;
@@ -321,4 +322,75 @@ public interface Team {
          */
         FOR_OWN_TEAM;
     }
+
+    // Spigot start
+    interface Spigot {
+
+        /**
+         * Gets the name displayed to entries for this team
+         *
+         * @return Team display name
+         * @throws IllegalStateException if this team has been unregistered
+         */
+        @NotNull
+        default BaseComponent getDisplayName() {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Sets the name displayed to entries for this team
+         *
+         * @param displayName New display name
+         * @throws IllegalStateException if this team has been unregistered
+         */
+        default void setDisplayName(@NotNull BaseComponent displayName) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Gets the prefix prepended to the display of entries on this team.
+         *
+         * @return Team prefix
+         * @throws IllegalStateException if this team has been unregistered
+         */
+        @NotNull
+        default BaseComponent getPrefix() {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Sets the prefix prepended to the display of entries on this team.
+         *
+         * @param prefix New prefix
+         * @throws IllegalStateException if this team has been unregistered
+         */
+        default void setPrefix(@NotNull BaseComponent prefix) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Gets the suffix appended to the display of entries on this team.
+         *
+         * @return the team's current suffix
+         * @throws IllegalStateException if this team has been unregistered
+         */
+        @NotNull
+        default BaseComponent getSuffix() {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Sets the suffix appended to the display of entries on this team.
+         *
+         * @param suffix the new suffix for this team.
+         * @throws IllegalStateException if this team has been unregistered
+         */
+        default void setSuffix(@NotNull BaseComponent suffix) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+    }
+
+    @NotNull
+    Spigot spigot();
+    // Spigot end
 }
-- 
2.42.0.windows.2

